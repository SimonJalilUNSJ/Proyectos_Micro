
Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000efc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080010c4  080010c4  000110c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001168  08001168  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001168  08001168  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001168  08001168  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001168  08001168  00011168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800116c  0800116c  0001116c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  080011d4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080011d4  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000023c0  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000628  00000000  00000000  00022454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00022a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  00022b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002bf0  00000000  00000000  00022c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000013b1  00000000  00000000  00025868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000096f9  00000000  00000000  00026c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00030312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a00  00000000  00000000  00030368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000064 	.word	0x20000064
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080010ac 	.word	0x080010ac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000068 	.word	0x20000068
 8000204:	080010ac 	.word	0x080010ac

08000208 <delay>:
 */

#include <stdint.h>
#include <stdio.h>

void delay(void){
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 300000; i++);
 800020e:	2300      	movs	r3, #0
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	e002      	b.n	800021a <delay+0x12>
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	3301      	adds	r3, #1
 8000218:	607b      	str	r3, [r7, #4]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <delay+0x28>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d9f8      	bls.n	8000214 <delay+0xc>
}
 8000222:	bf00      	nop
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	000493df 	.word	0x000493df

08000234 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af00      	add	r7, sp, #0
	uint32_t volatile *const pClkCtrlReg 	= (uint32_t*) (0x40023800 + 0x30);
 800023a:	4ba4      	ldr	r3, [pc, #656]	; (80004cc <main+0x298>)
 800023c:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pPullupDownReg	= (uint32_t*) (0x40020800 + 0x0C);
 800023e:	4ba4      	ldr	r3, [pc, #656]	; (80004d0 <main+0x29c>)
 8000240:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pGPIOCModeReg 	= (uint32_t*) 0x40020800;
 8000242:	4ba4      	ldr	r3, [pc, #656]	; (80004d4 <main+0x2a0>)
 8000244:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pInputDataReg	= (uint32_t*) (0x40020800 + 0x10);
 8000246:	4ba4      	ldr	r3, [pc, #656]	; (80004d8 <main+0x2a4>)
 8000248:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pOutputDataReg = (uint32_t*) (0x40020800 + 0x14);
 800024a:	4ba4      	ldr	r3, [pc, #656]	; (80004dc <main+0x2a8>)
 800024c:	607b      	str	r3, [r7, #4]

	//1.Habilitar el periferico clock  del GPIOC
	*pClkCtrlReg |= (1 << 2);
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 0204 	orr.w	r2, r3, #4
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	601a      	str	r2, [r3, #0]

	//2.Configurar PD0,PD1,PD2,PD3 como salida (renglones)
	*pGPIOCModeReg &= ~(0xFF);
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	601a      	str	r2, [r3, #0]
	*pGPIOCModeReg |= 0x55;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	601a      	str	r2, [r3, #0]

	//3.Configurar PD8,PD9,PD10,PD11 como entradas (columnas)
	*pGPIOCModeReg &= ~(0xFF << 16);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	601a      	str	r2, [r3, #0]

	//4.Habilitar resistencias internas de pull-up para PD8,PD9,PD10,PD11
	*pPullupDownReg &= ~(0xFF << 16);
 800027e:	693b      	ldr	r3, [r7, #16]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	601a      	str	r2, [r3, #0]
	*pPullupDownReg |= (0x55 << 16);
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f443 02aa 	orr.w	r2, r3, #5570560	; 0x550000
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	601a      	str	r2, [r3, #0]

	while(1){
		//Hacer todos los renglones HIGH
		*pOutputDataReg |= 0x0F;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f043 020f 	orr.w	r2, r3, #15
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	601a      	str	r2, [r3, #0]

		//Hacer R1 LOW (PD0)
		*pOutputDataReg &= ~(1 << 0);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f023 0201 	bic.w	r2, r3, #1
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	601a      	str	r2, [r3, #0]

		//Escanear las columnas
		//Cheaquear C1(PD8) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 8))){
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d104      	bne.n	80002c4 <main+0x90>
			//La tecla es presionada
			delay();
 80002ba:	f7ff ffa5 	bl	8000208 <delay>
			printf("1\n");
 80002be:	4888      	ldr	r0, [pc, #544]	; (80004e0 <main+0x2ac>)
 80002c0:	f000 fa9c 	bl	80007fc <puts>
		}

		//Cheaquear C2(PD9) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 9))){
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d104      	bne.n	80002da <main+0xa6>
			//La tecla es presionada
			delay();
 80002d0:	f7ff ff9a 	bl	8000208 <delay>
			printf("2\n");
 80002d4:	4883      	ldr	r0, [pc, #524]	; (80004e4 <main+0x2b0>)
 80002d6:	f000 fa91 	bl	80007fc <puts>
		}


		//Cheaquear C3(PD10) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 10))){
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d104      	bne.n	80002f0 <main+0xbc>
			//La tecla es presionada
			delay();
 80002e6:	f7ff ff8f 	bl	8000208 <delay>
			printf("3\n");
 80002ea:	487f      	ldr	r0, [pc, #508]	; (80004e8 <main+0x2b4>)
 80002ec:	f000 fa86 	bl	80007fc <puts>
		}

		//Cheaquear C4(PD11) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 11))){
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d104      	bne.n	8000306 <main+0xd2>
			//La tecla es presionada
			delay();
 80002fc:	f7ff ff84 	bl	8000208 <delay>
			printf("A\n");
 8000300:	487a      	ldr	r0, [pc, #488]	; (80004ec <main+0x2b8>)
 8000302:	f000 fa7b 	bl	80007fc <puts>
		}


		//Hacemos todos los renglones HIGH
		*pOutputDataReg |= 0x0F;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f043 020f 	orr.w	r2, r3, #15
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]

		//Hacemos R2 LOW(PD1)
		*pOutputDataReg &= ~(1 << 1);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f023 0202 	bic.w	r2, r3, #2
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	601a      	str	r2, [r3, #0]

		//Escanear las columnas
		//Cheaquear C1(PD8) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 8))){
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000326:	2b00      	cmp	r3, #0
 8000328:	d104      	bne.n	8000334 <main+0x100>
			//La tecla es presionada
			delay();
 800032a:	f7ff ff6d 	bl	8000208 <delay>
			printf("4\n");
 800032e:	4870      	ldr	r0, [pc, #448]	; (80004f0 <main+0x2bc>)
 8000330:	f000 fa64 	bl	80007fc <puts>
		}

		//Cheaquear C2(PD9) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 9))){
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800033c:	2b00      	cmp	r3, #0
 800033e:	d104      	bne.n	800034a <main+0x116>
			//La tecla es presionada
			delay();
 8000340:	f7ff ff62 	bl	8000208 <delay>
			printf("5\n");
 8000344:	486b      	ldr	r0, [pc, #428]	; (80004f4 <main+0x2c0>)
 8000346:	f000 fa59 	bl	80007fc <puts>
		}

		//Cheaquear C3(PD10) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 10))){
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000352:	2b00      	cmp	r3, #0
 8000354:	d104      	bne.n	8000360 <main+0x12c>
			//La tecla es presionada
			delay();
 8000356:	f7ff ff57 	bl	8000208 <delay>
			printf("6\n");
 800035a:	4867      	ldr	r0, [pc, #412]	; (80004f8 <main+0x2c4>)
 800035c:	f000 fa4e 	bl	80007fc <puts>
		}

		//Cheaquear C4(PD11) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 11))){
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000368:	2b00      	cmp	r3, #0
 800036a:	d104      	bne.n	8000376 <main+0x142>
			//La tecla es presionada
			delay();
 800036c:	f7ff ff4c 	bl	8000208 <delay>
			printf("B\n");
 8000370:	4862      	ldr	r0, [pc, #392]	; (80004fc <main+0x2c8>)
 8000372:	f000 fa43 	bl	80007fc <puts>
		}


		//Hacemos todos los renglones HIGH
		*pOutputDataReg |= 0x0F;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f043 020f 	orr.w	r2, r3, #15
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	601a      	str	r2, [r3, #0]

		//Hacemos R3 LOW(PD2)
		*pOutputDataReg &= ~(1 << 2);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f023 0204 	bic.w	r2, r3, #4
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	601a      	str	r2, [r3, #0]

		//Escanear las columnas
		//Cheaquear C1(PD8) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 8))){
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000396:	2b00      	cmp	r3, #0
 8000398:	d104      	bne.n	80003a4 <main+0x170>
			//La tecla es presionada
			delay();
 800039a:	f7ff ff35 	bl	8000208 <delay>
			printf("7\n");
 800039e:	4858      	ldr	r0, [pc, #352]	; (8000500 <main+0x2cc>)
 80003a0:	f000 fa2c 	bl	80007fc <puts>
		}

		//Cheaquear C2(PD9) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 9))){
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d104      	bne.n	80003ba <main+0x186>
			//La tecla es presionada
			delay();
 80003b0:	f7ff ff2a 	bl	8000208 <delay>
			printf("8\n");
 80003b4:	4853      	ldr	r0, [pc, #332]	; (8000504 <main+0x2d0>)
 80003b6:	f000 fa21 	bl	80007fc <puts>
		}

		//Cheaquear C3(PD10) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 10))){
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d104      	bne.n	80003d0 <main+0x19c>
			//La tecla es presionada
			delay();
 80003c6:	f7ff ff1f 	bl	8000208 <delay>
			printf("9\n");
 80003ca:	484f      	ldr	r0, [pc, #316]	; (8000508 <main+0x2d4>)
 80003cc:	f000 fa16 	bl	80007fc <puts>
		}

		//Cheaquear C4(PD11) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 11))){
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d104      	bne.n	80003e6 <main+0x1b2>
			//La tecla es presionada
			delay();
 80003dc:	f7ff ff14 	bl	8000208 <delay>
			printf("C\n");
 80003e0:	484a      	ldr	r0, [pc, #296]	; (800050c <main+0x2d8>)
 80003e2:	f000 fa0b 	bl	80007fc <puts>
		}

		//Hacemos todos los renglones HIGH
		*pOutputDataReg |= 0x0F;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f043 020f 	orr.w	r2, r3, #15
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	601a      	str	r2, [r3, #0]

		//Hacemos R3 LOW(PD2)
		*pOutputDataReg &= ~(1 << 2);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f023 0204 	bic.w	r2, r3, #4
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	601a      	str	r2, [r3, #0]

		//Escanear las columnas
		//Cheaquear C1(PD8) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 8))){
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000406:	2b00      	cmp	r3, #0
 8000408:	d104      	bne.n	8000414 <main+0x1e0>
			//La tecla es presionada
			delay();
 800040a:	f7ff fefd 	bl	8000208 <delay>
			printf("7\n");
 800040e:	483c      	ldr	r0, [pc, #240]	; (8000500 <main+0x2cc>)
 8000410:	f000 f9f4 	bl	80007fc <puts>
		}

		//Cheaquear C2(PD9) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 9))){
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800041c:	2b00      	cmp	r3, #0
 800041e:	d104      	bne.n	800042a <main+0x1f6>
			//La tecla es presionada
			delay();
 8000420:	f7ff fef2 	bl	8000208 <delay>
			printf("8\n");
 8000424:	4837      	ldr	r0, [pc, #220]	; (8000504 <main+0x2d0>)
 8000426:	f000 f9e9 	bl	80007fc <puts>
		}

		//Cheaquear C3(PD10) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 10))){
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000432:	2b00      	cmp	r3, #0
 8000434:	d104      	bne.n	8000440 <main+0x20c>
			//La tecla es presionada
			delay();
 8000436:	f7ff fee7 	bl	8000208 <delay>
			printf("9\n");
 800043a:	4833      	ldr	r0, [pc, #204]	; (8000508 <main+0x2d4>)
 800043c:	f000 f9de 	bl	80007fc <puts>
		}

		//Cheaquear C4(PD11) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 11))){
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000448:	2b00      	cmp	r3, #0
 800044a:	d104      	bne.n	8000456 <main+0x222>
			//La tecla es presionada
			delay();
 800044c:	f7ff fedc 	bl	8000208 <delay>
			printf("D\n");
 8000450:	482f      	ldr	r0, [pc, #188]	; (8000510 <main+0x2dc>)
 8000452:	f000 f9d3 	bl	80007fc <puts>
		}

		//Hacemos todos los renglones HIGH
		*pOutputDataReg |= 0x0F;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f043 020f 	orr.w	r2, r3, #15
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	601a      	str	r2, [r3, #0]

		//Hacemos R4 LOW(PD3)
		*pOutputDataReg &= ~(1 << 3);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f023 0208 	bic.w	r2, r3, #8
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	601a      	str	r2, [r3, #0]

		//Escanear las columnas
		//Cheaquear C1(PD8) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 8))){
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000476:	2b00      	cmp	r3, #0
 8000478:	d104      	bne.n	8000484 <main+0x250>
			//La tecla es presionada
			delay();
 800047a:	f7ff fec5 	bl	8000208 <delay>
			printf("*\n");
 800047e:	4825      	ldr	r0, [pc, #148]	; (8000514 <main+0x2e0>)
 8000480:	f000 f9bc 	bl	80007fc <puts>
		}

		//Cheaquear C2(PD9) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 9))){
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800048c:	2b00      	cmp	r3, #0
 800048e:	d104      	bne.n	800049a <main+0x266>
			//La tecla es presionada
			delay();
 8000490:	f7ff feba 	bl	8000208 <delay>
			printf("0\n");
 8000494:	4820      	ldr	r0, [pc, #128]	; (8000518 <main+0x2e4>)
 8000496:	f000 f9b1 	bl	80007fc <puts>
		}

		//Cheaquear C3(PD10) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 10))){
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d104      	bne.n	80004b0 <main+0x27c>
			//La tecla es presionada
			delay();
 80004a6:	f7ff feaf 	bl	8000208 <delay>
			printf("#\n");
 80004aa:	481c      	ldr	r0, [pc, #112]	; (800051c <main+0x2e8>)
 80004ac:	f000 f9a6 	bl	80007fc <puts>
		}

		//Cheaquear C4(PD11) si esta en alto o bajo
		if(!(*pInputDataReg & (1 << 11))){
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	f47f aeec 	bne.w	8000296 <main+0x62>
			//La tecla es presionada
			delay();
 80004be:	f7ff fea3 	bl	8000208 <delay>
			printf("D\n");
 80004c2:	4813      	ldr	r0, [pc, #76]	; (8000510 <main+0x2dc>)
 80004c4:	f000 f99a 	bl	80007fc <puts>
		*pOutputDataReg |= 0x0F;
 80004c8:	e6e5      	b.n	8000296 <main+0x62>
 80004ca:	bf00      	nop
 80004cc:	40023830 	.word	0x40023830
 80004d0:	4002080c 	.word	0x4002080c
 80004d4:	40020800 	.word	0x40020800
 80004d8:	40020810 	.word	0x40020810
 80004dc:	40020814 	.word	0x40020814
 80004e0:	080010c4 	.word	0x080010c4
 80004e4:	080010c8 	.word	0x080010c8
 80004e8:	080010cc 	.word	0x080010cc
 80004ec:	080010d0 	.word	0x080010d0
 80004f0:	080010d4 	.word	0x080010d4
 80004f4:	080010d8 	.word	0x080010d8
 80004f8:	080010dc 	.word	0x080010dc
 80004fc:	080010e0 	.word	0x080010e0
 8000500:	080010e4 	.word	0x080010e4
 8000504:	080010e8 	.word	0x080010e8
 8000508:	080010ec 	.word	0x080010ec
 800050c:	080010f0 	.word	0x080010f0
 8000510:	080010f4 	.word	0x080010f4
 8000514:	080010f8 	.word	0x080010f8
 8000518:	080010fc 	.word	0x080010fc
 800051c:	08001100 	.word	0x08001100

08000520 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	e00a      	b.n	8000548 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000532:	f3af 8000 	nop.w
 8000536:	4601      	mov	r1, r0
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	60ba      	str	r2, [r7, #8]
 800053e:	b2ca      	uxtb	r2, r1
 8000540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	3301      	adds	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	429a      	cmp	r2, r3
 800054e:	dbf0      	blt.n	8000532 <_read+0x12>
	}

return len;
 8000550:	687b      	ldr	r3, [r7, #4]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b086      	sub	sp, #24
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
 800056a:	e009      	b.n	8000580 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	60ba      	str	r2, [r7, #8]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	3301      	adds	r3, #1
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	697a      	ldr	r2, [r7, #20]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	429a      	cmp	r2, r3
 8000586:	dbf1      	blt.n	800056c <_write+0x12>
	}
	return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <_close>:

int _close(int file)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
	return -1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ba:	605a      	str	r2, [r3, #4]
	return 0;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_isatty>:

int _isatty(int file)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
	return 1;
 80005d2:	2301      	movs	r3, #1
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
	return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <_sbrk+0x5c>)
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <_sbrk+0x60>)
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d102      	bne.n	800061e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <_sbrk+0x64>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <_sbrk+0x68>)
 800061c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <_sbrk+0x64>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	429a      	cmp	r2, r3
 800062a:	d207      	bcs.n	800063c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800062c:	f000 f846 	bl	80006bc <__errno>
 8000630:	4603      	mov	r3, r0
 8000632:	220c      	movs	r2, #12
 8000634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800063a:	e009      	b.n	8000650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <_sbrk+0x64>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <_sbrk+0x64>)
 800064c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20008000 	.word	0x20008000
 800065c:	00000400 	.word	0x00000400
 8000660:	20000080 	.word	0x20000080
 8000664:	200000a0 	.word	0x200000a0

08000668 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800066c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	; (80006a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	; (80006b4 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000696:	f000 f817 	bl	80006c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069a:	f7ff fdcb 	bl	8000234 <main>

0800069e <LoopForever>:

LoopForever:
    b LoopForever
 800069e:	e7fe      	b.n	800069e <LoopForever>
  ldr   r0, =_estack
 80006a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006ac:	08001170 	.word	0x08001170
  ldr r2, =_sbss
 80006b0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006b4:	2000009c 	.word	0x2000009c

080006b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC_IRQHandler>
	...

080006bc <__errno>:
 80006bc:	4b01      	ldr	r3, [pc, #4]	; (80006c4 <__errno+0x8>)
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000

080006c8 <__libc_init_array>:
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	4d0d      	ldr	r5, [pc, #52]	; (8000700 <__libc_init_array+0x38>)
 80006cc:	4c0d      	ldr	r4, [pc, #52]	; (8000704 <__libc_init_array+0x3c>)
 80006ce:	1b64      	subs	r4, r4, r5
 80006d0:	10a4      	asrs	r4, r4, #2
 80006d2:	2600      	movs	r6, #0
 80006d4:	42a6      	cmp	r6, r4
 80006d6:	d109      	bne.n	80006ec <__libc_init_array+0x24>
 80006d8:	4d0b      	ldr	r5, [pc, #44]	; (8000708 <__libc_init_array+0x40>)
 80006da:	4c0c      	ldr	r4, [pc, #48]	; (800070c <__libc_init_array+0x44>)
 80006dc:	f000 fce6 	bl	80010ac <_init>
 80006e0:	1b64      	subs	r4, r4, r5
 80006e2:	10a4      	asrs	r4, r4, #2
 80006e4:	2600      	movs	r6, #0
 80006e6:	42a6      	cmp	r6, r4
 80006e8:	d105      	bne.n	80006f6 <__libc_init_array+0x2e>
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f0:	4798      	blx	r3
 80006f2:	3601      	adds	r6, #1
 80006f4:	e7ee      	b.n	80006d4 <__libc_init_array+0xc>
 80006f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006fa:	4798      	blx	r3
 80006fc:	3601      	adds	r6, #1
 80006fe:	e7f2      	b.n	80006e6 <__libc_init_array+0x1e>
 8000700:	08001168 	.word	0x08001168
 8000704:	08001168 	.word	0x08001168
 8000708:	08001168 	.word	0x08001168
 800070c:	0800116c 	.word	0x0800116c

08000710 <memset>:
 8000710:	4402      	add	r2, r0
 8000712:	4603      	mov	r3, r0
 8000714:	4293      	cmp	r3, r2
 8000716:	d100      	bne.n	800071a <memset+0xa>
 8000718:	4770      	bx	lr
 800071a:	f803 1b01 	strb.w	r1, [r3], #1
 800071e:	e7f9      	b.n	8000714 <memset+0x4>

08000720 <_puts_r>:
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	460e      	mov	r6, r1
 8000724:	4605      	mov	r5, r0
 8000726:	b118      	cbz	r0, 8000730 <_puts_r+0x10>
 8000728:	6983      	ldr	r3, [r0, #24]
 800072a:	b90b      	cbnz	r3, 8000730 <_puts_r+0x10>
 800072c:	f000 fa48 	bl	8000bc0 <__sinit>
 8000730:	69ab      	ldr	r3, [r5, #24]
 8000732:	68ac      	ldr	r4, [r5, #8]
 8000734:	b913      	cbnz	r3, 800073c <_puts_r+0x1c>
 8000736:	4628      	mov	r0, r5
 8000738:	f000 fa42 	bl	8000bc0 <__sinit>
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <_puts_r+0xd0>)
 800073e:	429c      	cmp	r4, r3
 8000740:	d120      	bne.n	8000784 <_puts_r+0x64>
 8000742:	686c      	ldr	r4, [r5, #4]
 8000744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000746:	07db      	lsls	r3, r3, #31
 8000748:	d405      	bmi.n	8000756 <_puts_r+0x36>
 800074a:	89a3      	ldrh	r3, [r4, #12]
 800074c:	0598      	lsls	r0, r3, #22
 800074e:	d402      	bmi.n	8000756 <_puts_r+0x36>
 8000750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000752:	f000 fad3 	bl	8000cfc <__retarget_lock_acquire_recursive>
 8000756:	89a3      	ldrh	r3, [r4, #12]
 8000758:	0719      	lsls	r1, r3, #28
 800075a:	d51d      	bpl.n	8000798 <_puts_r+0x78>
 800075c:	6923      	ldr	r3, [r4, #16]
 800075e:	b1db      	cbz	r3, 8000798 <_puts_r+0x78>
 8000760:	3e01      	subs	r6, #1
 8000762:	68a3      	ldr	r3, [r4, #8]
 8000764:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000768:	3b01      	subs	r3, #1
 800076a:	60a3      	str	r3, [r4, #8]
 800076c:	bb39      	cbnz	r1, 80007be <_puts_r+0x9e>
 800076e:	2b00      	cmp	r3, #0
 8000770:	da38      	bge.n	80007e4 <_puts_r+0xc4>
 8000772:	4622      	mov	r2, r4
 8000774:	210a      	movs	r1, #10
 8000776:	4628      	mov	r0, r5
 8000778:	f000 f848 	bl	800080c <__swbuf_r>
 800077c:	3001      	adds	r0, #1
 800077e:	d011      	beq.n	80007a4 <_puts_r+0x84>
 8000780:	250a      	movs	r5, #10
 8000782:	e011      	b.n	80007a8 <_puts_r+0x88>
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <_puts_r+0xd4>)
 8000786:	429c      	cmp	r4, r3
 8000788:	d101      	bne.n	800078e <_puts_r+0x6e>
 800078a:	68ac      	ldr	r4, [r5, #8]
 800078c:	e7da      	b.n	8000744 <_puts_r+0x24>
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <_puts_r+0xd8>)
 8000790:	429c      	cmp	r4, r3
 8000792:	bf08      	it	eq
 8000794:	68ec      	ldreq	r4, [r5, #12]
 8000796:	e7d5      	b.n	8000744 <_puts_r+0x24>
 8000798:	4621      	mov	r1, r4
 800079a:	4628      	mov	r0, r5
 800079c:	f000 f888 	bl	80008b0 <__swsetup_r>
 80007a0:	2800      	cmp	r0, #0
 80007a2:	d0dd      	beq.n	8000760 <_puts_r+0x40>
 80007a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80007a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007aa:	07da      	lsls	r2, r3, #31
 80007ac:	d405      	bmi.n	80007ba <_puts_r+0x9a>
 80007ae:	89a3      	ldrh	r3, [r4, #12]
 80007b0:	059b      	lsls	r3, r3, #22
 80007b2:	d402      	bmi.n	80007ba <_puts_r+0x9a>
 80007b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007b6:	f000 faa2 	bl	8000cfe <__retarget_lock_release_recursive>
 80007ba:	4628      	mov	r0, r5
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	2b00      	cmp	r3, #0
 80007c0:	da04      	bge.n	80007cc <_puts_r+0xac>
 80007c2:	69a2      	ldr	r2, [r4, #24]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dc06      	bgt.n	80007d6 <_puts_r+0xb6>
 80007c8:	290a      	cmp	r1, #10
 80007ca:	d004      	beq.n	80007d6 <_puts_r+0xb6>
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	6022      	str	r2, [r4, #0]
 80007d2:	7019      	strb	r1, [r3, #0]
 80007d4:	e7c5      	b.n	8000762 <_puts_r+0x42>
 80007d6:	4622      	mov	r2, r4
 80007d8:	4628      	mov	r0, r5
 80007da:	f000 f817 	bl	800080c <__swbuf_r>
 80007de:	3001      	adds	r0, #1
 80007e0:	d1bf      	bne.n	8000762 <_puts_r+0x42>
 80007e2:	e7df      	b.n	80007a4 <_puts_r+0x84>
 80007e4:	6823      	ldr	r3, [r4, #0]
 80007e6:	250a      	movs	r5, #10
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	6022      	str	r2, [r4, #0]
 80007ec:	701d      	strb	r5, [r3, #0]
 80007ee:	e7db      	b.n	80007a8 <_puts_r+0x88>
 80007f0:	08001128 	.word	0x08001128
 80007f4:	08001148 	.word	0x08001148
 80007f8:	08001108 	.word	0x08001108

080007fc <puts>:
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <puts+0xc>)
 80007fe:	4601      	mov	r1, r0
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	f7ff bf8d 	b.w	8000720 <_puts_r>
 8000806:	bf00      	nop
 8000808:	20000000 	.word	0x20000000

0800080c <__swbuf_r>:
 800080c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800080e:	460e      	mov	r6, r1
 8000810:	4614      	mov	r4, r2
 8000812:	4605      	mov	r5, r0
 8000814:	b118      	cbz	r0, 800081e <__swbuf_r+0x12>
 8000816:	6983      	ldr	r3, [r0, #24]
 8000818:	b90b      	cbnz	r3, 800081e <__swbuf_r+0x12>
 800081a:	f000 f9d1 	bl	8000bc0 <__sinit>
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <__swbuf_r+0x98>)
 8000820:	429c      	cmp	r4, r3
 8000822:	d12b      	bne.n	800087c <__swbuf_r+0x70>
 8000824:	686c      	ldr	r4, [r5, #4]
 8000826:	69a3      	ldr	r3, [r4, #24]
 8000828:	60a3      	str	r3, [r4, #8]
 800082a:	89a3      	ldrh	r3, [r4, #12]
 800082c:	071a      	lsls	r2, r3, #28
 800082e:	d52f      	bpl.n	8000890 <__swbuf_r+0x84>
 8000830:	6923      	ldr	r3, [r4, #16]
 8000832:	b36b      	cbz	r3, 8000890 <__swbuf_r+0x84>
 8000834:	6923      	ldr	r3, [r4, #16]
 8000836:	6820      	ldr	r0, [r4, #0]
 8000838:	1ac0      	subs	r0, r0, r3
 800083a:	6963      	ldr	r3, [r4, #20]
 800083c:	b2f6      	uxtb	r6, r6
 800083e:	4283      	cmp	r3, r0
 8000840:	4637      	mov	r7, r6
 8000842:	dc04      	bgt.n	800084e <__swbuf_r+0x42>
 8000844:	4621      	mov	r1, r4
 8000846:	4628      	mov	r0, r5
 8000848:	f000 f926 	bl	8000a98 <_fflush_r>
 800084c:	bb30      	cbnz	r0, 800089c <__swbuf_r+0x90>
 800084e:	68a3      	ldr	r3, [r4, #8]
 8000850:	3b01      	subs	r3, #1
 8000852:	60a3      	str	r3, [r4, #8]
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	6022      	str	r2, [r4, #0]
 800085a:	701e      	strb	r6, [r3, #0]
 800085c:	6963      	ldr	r3, [r4, #20]
 800085e:	3001      	adds	r0, #1
 8000860:	4283      	cmp	r3, r0
 8000862:	d004      	beq.n	800086e <__swbuf_r+0x62>
 8000864:	89a3      	ldrh	r3, [r4, #12]
 8000866:	07db      	lsls	r3, r3, #31
 8000868:	d506      	bpl.n	8000878 <__swbuf_r+0x6c>
 800086a:	2e0a      	cmp	r6, #10
 800086c:	d104      	bne.n	8000878 <__swbuf_r+0x6c>
 800086e:	4621      	mov	r1, r4
 8000870:	4628      	mov	r0, r5
 8000872:	f000 f911 	bl	8000a98 <_fflush_r>
 8000876:	b988      	cbnz	r0, 800089c <__swbuf_r+0x90>
 8000878:	4638      	mov	r0, r7
 800087a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <__swbuf_r+0x9c>)
 800087e:	429c      	cmp	r4, r3
 8000880:	d101      	bne.n	8000886 <__swbuf_r+0x7a>
 8000882:	68ac      	ldr	r4, [r5, #8]
 8000884:	e7cf      	b.n	8000826 <__swbuf_r+0x1a>
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <__swbuf_r+0xa0>)
 8000888:	429c      	cmp	r4, r3
 800088a:	bf08      	it	eq
 800088c:	68ec      	ldreq	r4, [r5, #12]
 800088e:	e7ca      	b.n	8000826 <__swbuf_r+0x1a>
 8000890:	4621      	mov	r1, r4
 8000892:	4628      	mov	r0, r5
 8000894:	f000 f80c 	bl	80008b0 <__swsetup_r>
 8000898:	2800      	cmp	r0, #0
 800089a:	d0cb      	beq.n	8000834 <__swbuf_r+0x28>
 800089c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80008a0:	e7ea      	b.n	8000878 <__swbuf_r+0x6c>
 80008a2:	bf00      	nop
 80008a4:	08001128 	.word	0x08001128
 80008a8:	08001148 	.word	0x08001148
 80008ac:	08001108 	.word	0x08001108

080008b0 <__swsetup_r>:
 80008b0:	4b32      	ldr	r3, [pc, #200]	; (800097c <__swsetup_r+0xcc>)
 80008b2:	b570      	push	{r4, r5, r6, lr}
 80008b4:	681d      	ldr	r5, [r3, #0]
 80008b6:	4606      	mov	r6, r0
 80008b8:	460c      	mov	r4, r1
 80008ba:	b125      	cbz	r5, 80008c6 <__swsetup_r+0x16>
 80008bc:	69ab      	ldr	r3, [r5, #24]
 80008be:	b913      	cbnz	r3, 80008c6 <__swsetup_r+0x16>
 80008c0:	4628      	mov	r0, r5
 80008c2:	f000 f97d 	bl	8000bc0 <__sinit>
 80008c6:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <__swsetup_r+0xd0>)
 80008c8:	429c      	cmp	r4, r3
 80008ca:	d10f      	bne.n	80008ec <__swsetup_r+0x3c>
 80008cc:	686c      	ldr	r4, [r5, #4]
 80008ce:	89a3      	ldrh	r3, [r4, #12]
 80008d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008d4:	0719      	lsls	r1, r3, #28
 80008d6:	d42c      	bmi.n	8000932 <__swsetup_r+0x82>
 80008d8:	06dd      	lsls	r5, r3, #27
 80008da:	d411      	bmi.n	8000900 <__swsetup_r+0x50>
 80008dc:	2309      	movs	r3, #9
 80008de:	6033      	str	r3, [r6, #0]
 80008e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008e4:	81a3      	strh	r3, [r4, #12]
 80008e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ea:	e03e      	b.n	800096a <__swsetup_r+0xba>
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <__swsetup_r+0xd4>)
 80008ee:	429c      	cmp	r4, r3
 80008f0:	d101      	bne.n	80008f6 <__swsetup_r+0x46>
 80008f2:	68ac      	ldr	r4, [r5, #8]
 80008f4:	e7eb      	b.n	80008ce <__swsetup_r+0x1e>
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <__swsetup_r+0xd8>)
 80008f8:	429c      	cmp	r4, r3
 80008fa:	bf08      	it	eq
 80008fc:	68ec      	ldreq	r4, [r5, #12]
 80008fe:	e7e6      	b.n	80008ce <__swsetup_r+0x1e>
 8000900:	0758      	lsls	r0, r3, #29
 8000902:	d512      	bpl.n	800092a <__swsetup_r+0x7a>
 8000904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000906:	b141      	cbz	r1, 800091a <__swsetup_r+0x6a>
 8000908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800090c:	4299      	cmp	r1, r3
 800090e:	d002      	beq.n	8000916 <__swsetup_r+0x66>
 8000910:	4630      	mov	r0, r6
 8000912:	f000 fa59 	bl	8000dc8 <_free_r>
 8000916:	2300      	movs	r3, #0
 8000918:	6363      	str	r3, [r4, #52]	; 0x34
 800091a:	89a3      	ldrh	r3, [r4, #12]
 800091c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000920:	81a3      	strh	r3, [r4, #12]
 8000922:	2300      	movs	r3, #0
 8000924:	6063      	str	r3, [r4, #4]
 8000926:	6923      	ldr	r3, [r4, #16]
 8000928:	6023      	str	r3, [r4, #0]
 800092a:	89a3      	ldrh	r3, [r4, #12]
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	81a3      	strh	r3, [r4, #12]
 8000932:	6923      	ldr	r3, [r4, #16]
 8000934:	b94b      	cbnz	r3, 800094a <__swsetup_r+0x9a>
 8000936:	89a3      	ldrh	r3, [r4, #12]
 8000938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800093c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000940:	d003      	beq.n	800094a <__swsetup_r+0x9a>
 8000942:	4621      	mov	r1, r4
 8000944:	4630      	mov	r0, r6
 8000946:	f000 f9ff 	bl	8000d48 <__smakebuf_r>
 800094a:	89a0      	ldrh	r0, [r4, #12]
 800094c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000950:	f010 0301 	ands.w	r3, r0, #1
 8000954:	d00a      	beq.n	800096c <__swsetup_r+0xbc>
 8000956:	2300      	movs	r3, #0
 8000958:	60a3      	str	r3, [r4, #8]
 800095a:	6963      	ldr	r3, [r4, #20]
 800095c:	425b      	negs	r3, r3
 800095e:	61a3      	str	r3, [r4, #24]
 8000960:	6923      	ldr	r3, [r4, #16]
 8000962:	b943      	cbnz	r3, 8000976 <__swsetup_r+0xc6>
 8000964:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000968:	d1ba      	bne.n	80008e0 <__swsetup_r+0x30>
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	0781      	lsls	r1, r0, #30
 800096e:	bf58      	it	pl
 8000970:	6963      	ldrpl	r3, [r4, #20]
 8000972:	60a3      	str	r3, [r4, #8]
 8000974:	e7f4      	b.n	8000960 <__swsetup_r+0xb0>
 8000976:	2000      	movs	r0, #0
 8000978:	e7f7      	b.n	800096a <__swsetup_r+0xba>
 800097a:	bf00      	nop
 800097c:	20000000 	.word	0x20000000
 8000980:	08001128 	.word	0x08001128
 8000984:	08001148 	.word	0x08001148
 8000988:	08001108 	.word	0x08001108

0800098c <__sflush_r>:
 800098c:	898a      	ldrh	r2, [r1, #12]
 800098e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000992:	4605      	mov	r5, r0
 8000994:	0710      	lsls	r0, r2, #28
 8000996:	460c      	mov	r4, r1
 8000998:	d458      	bmi.n	8000a4c <__sflush_r+0xc0>
 800099a:	684b      	ldr	r3, [r1, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	dc05      	bgt.n	80009ac <__sflush_r+0x20>
 80009a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	dc02      	bgt.n	80009ac <__sflush_r+0x20>
 80009a6:	2000      	movs	r0, #0
 80009a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d0f9      	beq.n	80009a6 <__sflush_r+0x1a>
 80009b2:	2300      	movs	r3, #0
 80009b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80009b8:	682f      	ldr	r7, [r5, #0]
 80009ba:	602b      	str	r3, [r5, #0]
 80009bc:	d032      	beq.n	8000a24 <__sflush_r+0x98>
 80009be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009c0:	89a3      	ldrh	r3, [r4, #12]
 80009c2:	075a      	lsls	r2, r3, #29
 80009c4:	d505      	bpl.n	80009d2 <__sflush_r+0x46>
 80009c6:	6863      	ldr	r3, [r4, #4]
 80009c8:	1ac0      	subs	r0, r0, r3
 80009ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009cc:	b10b      	cbz	r3, 80009d2 <__sflush_r+0x46>
 80009ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009d0:	1ac0      	subs	r0, r0, r3
 80009d2:	2300      	movs	r3, #0
 80009d4:	4602      	mov	r2, r0
 80009d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009d8:	6a21      	ldr	r1, [r4, #32]
 80009da:	4628      	mov	r0, r5
 80009dc:	47b0      	blx	r6
 80009de:	1c43      	adds	r3, r0, #1
 80009e0:	89a3      	ldrh	r3, [r4, #12]
 80009e2:	d106      	bne.n	80009f2 <__sflush_r+0x66>
 80009e4:	6829      	ldr	r1, [r5, #0]
 80009e6:	291d      	cmp	r1, #29
 80009e8:	d82c      	bhi.n	8000a44 <__sflush_r+0xb8>
 80009ea:	4a2a      	ldr	r2, [pc, #168]	; (8000a94 <__sflush_r+0x108>)
 80009ec:	40ca      	lsrs	r2, r1
 80009ee:	07d6      	lsls	r6, r2, #31
 80009f0:	d528      	bpl.n	8000a44 <__sflush_r+0xb8>
 80009f2:	2200      	movs	r2, #0
 80009f4:	6062      	str	r2, [r4, #4]
 80009f6:	04d9      	lsls	r1, r3, #19
 80009f8:	6922      	ldr	r2, [r4, #16]
 80009fa:	6022      	str	r2, [r4, #0]
 80009fc:	d504      	bpl.n	8000a08 <__sflush_r+0x7c>
 80009fe:	1c42      	adds	r2, r0, #1
 8000a00:	d101      	bne.n	8000a06 <__sflush_r+0x7a>
 8000a02:	682b      	ldr	r3, [r5, #0]
 8000a04:	b903      	cbnz	r3, 8000a08 <__sflush_r+0x7c>
 8000a06:	6560      	str	r0, [r4, #84]	; 0x54
 8000a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a0a:	602f      	str	r7, [r5, #0]
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d0ca      	beq.n	80009a6 <__sflush_r+0x1a>
 8000a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a14:	4299      	cmp	r1, r3
 8000a16:	d002      	beq.n	8000a1e <__sflush_r+0x92>
 8000a18:	4628      	mov	r0, r5
 8000a1a:	f000 f9d5 	bl	8000dc8 <_free_r>
 8000a1e:	2000      	movs	r0, #0
 8000a20:	6360      	str	r0, [r4, #52]	; 0x34
 8000a22:	e7c1      	b.n	80009a8 <__sflush_r+0x1c>
 8000a24:	6a21      	ldr	r1, [r4, #32]
 8000a26:	2301      	movs	r3, #1
 8000a28:	4628      	mov	r0, r5
 8000a2a:	47b0      	blx	r6
 8000a2c:	1c41      	adds	r1, r0, #1
 8000a2e:	d1c7      	bne.n	80009c0 <__sflush_r+0x34>
 8000a30:	682b      	ldr	r3, [r5, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0c4      	beq.n	80009c0 <__sflush_r+0x34>
 8000a36:	2b1d      	cmp	r3, #29
 8000a38:	d001      	beq.n	8000a3e <__sflush_r+0xb2>
 8000a3a:	2b16      	cmp	r3, #22
 8000a3c:	d101      	bne.n	8000a42 <__sflush_r+0xb6>
 8000a3e:	602f      	str	r7, [r5, #0]
 8000a40:	e7b1      	b.n	80009a6 <__sflush_r+0x1a>
 8000a42:	89a3      	ldrh	r3, [r4, #12]
 8000a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a48:	81a3      	strh	r3, [r4, #12]
 8000a4a:	e7ad      	b.n	80009a8 <__sflush_r+0x1c>
 8000a4c:	690f      	ldr	r7, [r1, #16]
 8000a4e:	2f00      	cmp	r7, #0
 8000a50:	d0a9      	beq.n	80009a6 <__sflush_r+0x1a>
 8000a52:	0793      	lsls	r3, r2, #30
 8000a54:	680e      	ldr	r6, [r1, #0]
 8000a56:	bf08      	it	eq
 8000a58:	694b      	ldreq	r3, [r1, #20]
 8000a5a:	600f      	str	r7, [r1, #0]
 8000a5c:	bf18      	it	ne
 8000a5e:	2300      	movne	r3, #0
 8000a60:	eba6 0807 	sub.w	r8, r6, r7
 8000a64:	608b      	str	r3, [r1, #8]
 8000a66:	f1b8 0f00 	cmp.w	r8, #0
 8000a6a:	dd9c      	ble.n	80009a6 <__sflush_r+0x1a>
 8000a6c:	6a21      	ldr	r1, [r4, #32]
 8000a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a70:	4643      	mov	r3, r8
 8000a72:	463a      	mov	r2, r7
 8000a74:	4628      	mov	r0, r5
 8000a76:	47b0      	blx	r6
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	dc06      	bgt.n	8000a8a <__sflush_r+0xfe>
 8000a7c:	89a3      	ldrh	r3, [r4, #12]
 8000a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a82:	81a3      	strh	r3, [r4, #12]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a88:	e78e      	b.n	80009a8 <__sflush_r+0x1c>
 8000a8a:	4407      	add	r7, r0
 8000a8c:	eba8 0800 	sub.w	r8, r8, r0
 8000a90:	e7e9      	b.n	8000a66 <__sflush_r+0xda>
 8000a92:	bf00      	nop
 8000a94:	20400001 	.word	0x20400001

08000a98 <_fflush_r>:
 8000a98:	b538      	push	{r3, r4, r5, lr}
 8000a9a:	690b      	ldr	r3, [r1, #16]
 8000a9c:	4605      	mov	r5, r0
 8000a9e:	460c      	mov	r4, r1
 8000aa0:	b913      	cbnz	r3, 8000aa8 <_fflush_r+0x10>
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	bd38      	pop	{r3, r4, r5, pc}
 8000aa8:	b118      	cbz	r0, 8000ab2 <_fflush_r+0x1a>
 8000aaa:	6983      	ldr	r3, [r0, #24]
 8000aac:	b90b      	cbnz	r3, 8000ab2 <_fflush_r+0x1a>
 8000aae:	f000 f887 	bl	8000bc0 <__sinit>
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <_fflush_r+0x6c>)
 8000ab4:	429c      	cmp	r4, r3
 8000ab6:	d11b      	bne.n	8000af0 <_fflush_r+0x58>
 8000ab8:	686c      	ldr	r4, [r5, #4]
 8000aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0ef      	beq.n	8000aa2 <_fflush_r+0xa>
 8000ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ac4:	07d0      	lsls	r0, r2, #31
 8000ac6:	d404      	bmi.n	8000ad2 <_fflush_r+0x3a>
 8000ac8:	0599      	lsls	r1, r3, #22
 8000aca:	d402      	bmi.n	8000ad2 <_fflush_r+0x3a>
 8000acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ace:	f000 f915 	bl	8000cfc <__retarget_lock_acquire_recursive>
 8000ad2:	4628      	mov	r0, r5
 8000ad4:	4621      	mov	r1, r4
 8000ad6:	f7ff ff59 	bl	800098c <__sflush_r>
 8000ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000adc:	07da      	lsls	r2, r3, #31
 8000ade:	4605      	mov	r5, r0
 8000ae0:	d4e0      	bmi.n	8000aa4 <_fflush_r+0xc>
 8000ae2:	89a3      	ldrh	r3, [r4, #12]
 8000ae4:	059b      	lsls	r3, r3, #22
 8000ae6:	d4dd      	bmi.n	8000aa4 <_fflush_r+0xc>
 8000ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000aea:	f000 f908 	bl	8000cfe <__retarget_lock_release_recursive>
 8000aee:	e7d9      	b.n	8000aa4 <_fflush_r+0xc>
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <_fflush_r+0x70>)
 8000af2:	429c      	cmp	r4, r3
 8000af4:	d101      	bne.n	8000afa <_fflush_r+0x62>
 8000af6:	68ac      	ldr	r4, [r5, #8]
 8000af8:	e7df      	b.n	8000aba <_fflush_r+0x22>
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <_fflush_r+0x74>)
 8000afc:	429c      	cmp	r4, r3
 8000afe:	bf08      	it	eq
 8000b00:	68ec      	ldreq	r4, [r5, #12]
 8000b02:	e7da      	b.n	8000aba <_fflush_r+0x22>
 8000b04:	08001128 	.word	0x08001128
 8000b08:	08001148 	.word	0x08001148
 8000b0c:	08001108 	.word	0x08001108

08000b10 <std>:
 8000b10:	2300      	movs	r3, #0
 8000b12:	b510      	push	{r4, lr}
 8000b14:	4604      	mov	r4, r0
 8000b16:	e9c0 3300 	strd	r3, r3, [r0]
 8000b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b1e:	6083      	str	r3, [r0, #8]
 8000b20:	8181      	strh	r1, [r0, #12]
 8000b22:	6643      	str	r3, [r0, #100]	; 0x64
 8000b24:	81c2      	strh	r2, [r0, #14]
 8000b26:	6183      	str	r3, [r0, #24]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	305c      	adds	r0, #92	; 0x5c
 8000b2e:	f7ff fdef 	bl	8000710 <memset>
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <std+0x38>)
 8000b34:	6263      	str	r3, [r4, #36]	; 0x24
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <std+0x3c>)
 8000b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <std+0x40>)
 8000b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <std+0x44>)
 8000b40:	6224      	str	r4, [r4, #32]
 8000b42:	6323      	str	r3, [r4, #48]	; 0x30
 8000b44:	bd10      	pop	{r4, pc}
 8000b46:	bf00      	nop
 8000b48:	08000f3d 	.word	0x08000f3d
 8000b4c:	08000f5f 	.word	0x08000f5f
 8000b50:	08000f97 	.word	0x08000f97
 8000b54:	08000fbb 	.word	0x08000fbb

08000b58 <_cleanup_r>:
 8000b58:	4901      	ldr	r1, [pc, #4]	; (8000b60 <_cleanup_r+0x8>)
 8000b5a:	f000 b8af 	b.w	8000cbc <_fwalk_reent>
 8000b5e:	bf00      	nop
 8000b60:	08000a99 	.word	0x08000a99

08000b64 <__sfmoreglue>:
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	1e4a      	subs	r2, r1, #1
 8000b68:	2568      	movs	r5, #104	; 0x68
 8000b6a:	4355      	muls	r5, r2
 8000b6c:	460e      	mov	r6, r1
 8000b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b72:	f000 f979 	bl	8000e68 <_malloc_r>
 8000b76:	4604      	mov	r4, r0
 8000b78:	b140      	cbz	r0, 8000b8c <__sfmoreglue+0x28>
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8000b80:	300c      	adds	r0, #12
 8000b82:	60a0      	str	r0, [r4, #8]
 8000b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b88:	f7ff fdc2 	bl	8000710 <memset>
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}

08000b90 <__sfp_lock_acquire>:
 8000b90:	4801      	ldr	r0, [pc, #4]	; (8000b98 <__sfp_lock_acquire+0x8>)
 8000b92:	f000 b8b3 	b.w	8000cfc <__retarget_lock_acquire_recursive>
 8000b96:	bf00      	nop
 8000b98:	20000094 	.word	0x20000094

08000b9c <__sfp_lock_release>:
 8000b9c:	4801      	ldr	r0, [pc, #4]	; (8000ba4 <__sfp_lock_release+0x8>)
 8000b9e:	f000 b8ae 	b.w	8000cfe <__retarget_lock_release_recursive>
 8000ba2:	bf00      	nop
 8000ba4:	20000094 	.word	0x20000094

08000ba8 <__sinit_lock_acquire>:
 8000ba8:	4801      	ldr	r0, [pc, #4]	; (8000bb0 <__sinit_lock_acquire+0x8>)
 8000baa:	f000 b8a7 	b.w	8000cfc <__retarget_lock_acquire_recursive>
 8000bae:	bf00      	nop
 8000bb0:	2000008f 	.word	0x2000008f

08000bb4 <__sinit_lock_release>:
 8000bb4:	4801      	ldr	r0, [pc, #4]	; (8000bbc <__sinit_lock_release+0x8>)
 8000bb6:	f000 b8a2 	b.w	8000cfe <__retarget_lock_release_recursive>
 8000bba:	bf00      	nop
 8000bbc:	2000008f 	.word	0x2000008f

08000bc0 <__sinit>:
 8000bc0:	b510      	push	{r4, lr}
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	f7ff fff0 	bl	8000ba8 <__sinit_lock_acquire>
 8000bc8:	69a3      	ldr	r3, [r4, #24]
 8000bca:	b11b      	cbz	r3, 8000bd4 <__sinit+0x14>
 8000bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bd0:	f7ff bff0 	b.w	8000bb4 <__sinit_lock_release>
 8000bd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <__sinit+0x68>)
 8000bdc:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <__sinit+0x6c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	62a2      	str	r2, [r4, #40]	; 0x28
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	bf04      	itt	eq
 8000be6:	2301      	moveq	r3, #1
 8000be8:	61a3      	streq	r3, [r4, #24]
 8000bea:	4620      	mov	r0, r4
 8000bec:	f000 f820 	bl	8000c30 <__sfp>
 8000bf0:	6060      	str	r0, [r4, #4]
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f000 f81c 	bl	8000c30 <__sfp>
 8000bf8:	60a0      	str	r0, [r4, #8]
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f000 f818 	bl	8000c30 <__sfp>
 8000c00:	2200      	movs	r2, #0
 8000c02:	60e0      	str	r0, [r4, #12]
 8000c04:	2104      	movs	r1, #4
 8000c06:	6860      	ldr	r0, [r4, #4]
 8000c08:	f7ff ff82 	bl	8000b10 <std>
 8000c0c:	68a0      	ldr	r0, [r4, #8]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2109      	movs	r1, #9
 8000c12:	f7ff ff7d 	bl	8000b10 <std>
 8000c16:	68e0      	ldr	r0, [r4, #12]
 8000c18:	2202      	movs	r2, #2
 8000c1a:	2112      	movs	r1, #18
 8000c1c:	f7ff ff78 	bl	8000b10 <std>
 8000c20:	2301      	movs	r3, #1
 8000c22:	61a3      	str	r3, [r4, #24]
 8000c24:	e7d2      	b.n	8000bcc <__sinit+0xc>
 8000c26:	bf00      	nop
 8000c28:	08001104 	.word	0x08001104
 8000c2c:	08000b59 	.word	0x08000b59

08000c30 <__sfp>:
 8000c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c32:	4607      	mov	r7, r0
 8000c34:	f7ff ffac 	bl	8000b90 <__sfp_lock_acquire>
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <__sfp+0x84>)
 8000c3a:	681e      	ldr	r6, [r3, #0]
 8000c3c:	69b3      	ldr	r3, [r6, #24]
 8000c3e:	b913      	cbnz	r3, 8000c46 <__sfp+0x16>
 8000c40:	4630      	mov	r0, r6
 8000c42:	f7ff ffbd 	bl	8000bc0 <__sinit>
 8000c46:	3648      	adds	r6, #72	; 0x48
 8000c48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	d503      	bpl.n	8000c58 <__sfp+0x28>
 8000c50:	6833      	ldr	r3, [r6, #0]
 8000c52:	b30b      	cbz	r3, 8000c98 <__sfp+0x68>
 8000c54:	6836      	ldr	r6, [r6, #0]
 8000c56:	e7f7      	b.n	8000c48 <__sfp+0x18>
 8000c58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c5c:	b9d5      	cbnz	r5, 8000c94 <__sfp+0x64>
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <__sfp+0x88>)
 8000c60:	60e3      	str	r3, [r4, #12]
 8000c62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c66:	6665      	str	r5, [r4, #100]	; 0x64
 8000c68:	f000 f847 	bl	8000cfa <__retarget_lock_init_recursive>
 8000c6c:	f7ff ff96 	bl	8000b9c <__sfp_lock_release>
 8000c70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c78:	6025      	str	r5, [r4, #0]
 8000c7a:	61a5      	str	r5, [r4, #24]
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	4629      	mov	r1, r5
 8000c80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c84:	f7ff fd44 	bl	8000710 <memset>
 8000c88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c90:	4620      	mov	r0, r4
 8000c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c94:	3468      	adds	r4, #104	; 0x68
 8000c96:	e7d9      	b.n	8000c4c <__sfp+0x1c>
 8000c98:	2104      	movs	r1, #4
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	f7ff ff62 	bl	8000b64 <__sfmoreglue>
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	6030      	str	r0, [r6, #0]
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d1d5      	bne.n	8000c54 <__sfp+0x24>
 8000ca8:	f7ff ff78 	bl	8000b9c <__sfp_lock_release>
 8000cac:	230c      	movs	r3, #12
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	e7ee      	b.n	8000c90 <__sfp+0x60>
 8000cb2:	bf00      	nop
 8000cb4:	08001104 	.word	0x08001104
 8000cb8:	ffff0001 	.word	0xffff0001

08000cbc <_fwalk_reent>:
 8000cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cc0:	4606      	mov	r6, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000cce:	f1b9 0901 	subs.w	r9, r9, #1
 8000cd2:	d505      	bpl.n	8000ce0 <_fwalk_reent+0x24>
 8000cd4:	6824      	ldr	r4, [r4, #0]
 8000cd6:	2c00      	cmp	r4, #0
 8000cd8:	d1f7      	bne.n	8000cca <_fwalk_reent+0xe>
 8000cda:	4638      	mov	r0, r7
 8000cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ce0:	89ab      	ldrh	r3, [r5, #12]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d907      	bls.n	8000cf6 <_fwalk_reent+0x3a>
 8000ce6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cea:	3301      	adds	r3, #1
 8000cec:	d003      	beq.n	8000cf6 <_fwalk_reent+0x3a>
 8000cee:	4629      	mov	r1, r5
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	47c0      	blx	r8
 8000cf4:	4307      	orrs	r7, r0
 8000cf6:	3568      	adds	r5, #104	; 0x68
 8000cf8:	e7e9      	b.n	8000cce <_fwalk_reent+0x12>

08000cfa <__retarget_lock_init_recursive>:
 8000cfa:	4770      	bx	lr

08000cfc <__retarget_lock_acquire_recursive>:
 8000cfc:	4770      	bx	lr

08000cfe <__retarget_lock_release_recursive>:
 8000cfe:	4770      	bx	lr

08000d00 <__swhatbuf_r>:
 8000d00:	b570      	push	{r4, r5, r6, lr}
 8000d02:	460e      	mov	r6, r1
 8000d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	b096      	sub	sp, #88	; 0x58
 8000d0c:	4614      	mov	r4, r2
 8000d0e:	461d      	mov	r5, r3
 8000d10:	da07      	bge.n	8000d22 <__swhatbuf_r+0x22>
 8000d12:	2300      	movs	r3, #0
 8000d14:	602b      	str	r3, [r5, #0]
 8000d16:	89b3      	ldrh	r3, [r6, #12]
 8000d18:	061a      	lsls	r2, r3, #24
 8000d1a:	d410      	bmi.n	8000d3e <__swhatbuf_r+0x3e>
 8000d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d20:	e00e      	b.n	8000d40 <__swhatbuf_r+0x40>
 8000d22:	466a      	mov	r2, sp
 8000d24:	f000 f970 	bl	8001008 <_fstat_r>
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	dbf2      	blt.n	8000d12 <__swhatbuf_r+0x12>
 8000d2c:	9a01      	ldr	r2, [sp, #4]
 8000d2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d36:	425a      	negs	r2, r3
 8000d38:	415a      	adcs	r2, r3
 8000d3a:	602a      	str	r2, [r5, #0]
 8000d3c:	e7ee      	b.n	8000d1c <__swhatbuf_r+0x1c>
 8000d3e:	2340      	movs	r3, #64	; 0x40
 8000d40:	2000      	movs	r0, #0
 8000d42:	6023      	str	r3, [r4, #0]
 8000d44:	b016      	add	sp, #88	; 0x58
 8000d46:	bd70      	pop	{r4, r5, r6, pc}

08000d48 <__smakebuf_r>:
 8000d48:	898b      	ldrh	r3, [r1, #12]
 8000d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d4c:	079d      	lsls	r5, r3, #30
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460c      	mov	r4, r1
 8000d52:	d507      	bpl.n	8000d64 <__smakebuf_r+0x1c>
 8000d54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d58:	6023      	str	r3, [r4, #0]
 8000d5a:	6123      	str	r3, [r4, #16]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	6163      	str	r3, [r4, #20]
 8000d60:	b002      	add	sp, #8
 8000d62:	bd70      	pop	{r4, r5, r6, pc}
 8000d64:	ab01      	add	r3, sp, #4
 8000d66:	466a      	mov	r2, sp
 8000d68:	f7ff ffca 	bl	8000d00 <__swhatbuf_r>
 8000d6c:	9900      	ldr	r1, [sp, #0]
 8000d6e:	4605      	mov	r5, r0
 8000d70:	4630      	mov	r0, r6
 8000d72:	f000 f879 	bl	8000e68 <_malloc_r>
 8000d76:	b948      	cbnz	r0, 8000d8c <__smakebuf_r+0x44>
 8000d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d7c:	059a      	lsls	r2, r3, #22
 8000d7e:	d4ef      	bmi.n	8000d60 <__smakebuf_r+0x18>
 8000d80:	f023 0303 	bic.w	r3, r3, #3
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	81a3      	strh	r3, [r4, #12]
 8000d8a:	e7e3      	b.n	8000d54 <__smakebuf_r+0xc>
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <__smakebuf_r+0x7c>)
 8000d8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d90:	89a3      	ldrh	r3, [r4, #12]
 8000d92:	6020      	str	r0, [r4, #0]
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	81a3      	strh	r3, [r4, #12]
 8000d9a:	9b00      	ldr	r3, [sp, #0]
 8000d9c:	6163      	str	r3, [r4, #20]
 8000d9e:	9b01      	ldr	r3, [sp, #4]
 8000da0:	6120      	str	r0, [r4, #16]
 8000da2:	b15b      	cbz	r3, 8000dbc <__smakebuf_r+0x74>
 8000da4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000da8:	4630      	mov	r0, r6
 8000daa:	f000 f93f 	bl	800102c <_isatty_r>
 8000dae:	b128      	cbz	r0, 8000dbc <__smakebuf_r+0x74>
 8000db0:	89a3      	ldrh	r3, [r4, #12]
 8000db2:	f023 0303 	bic.w	r3, r3, #3
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	81a3      	strh	r3, [r4, #12]
 8000dbc:	89a0      	ldrh	r0, [r4, #12]
 8000dbe:	4305      	orrs	r5, r0
 8000dc0:	81a5      	strh	r5, [r4, #12]
 8000dc2:	e7cd      	b.n	8000d60 <__smakebuf_r+0x18>
 8000dc4:	08000b59 	.word	0x08000b59

08000dc8 <_free_r>:
 8000dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000dca:	2900      	cmp	r1, #0
 8000dcc:	d048      	beq.n	8000e60 <_free_r+0x98>
 8000dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dd2:	9001      	str	r0, [sp, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8000dda:	bfb8      	it	lt
 8000ddc:	18e4      	addlt	r4, r4, r3
 8000dde:	f000 f947 	bl	8001070 <__malloc_lock>
 8000de2:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <_free_r+0x9c>)
 8000de4:	9801      	ldr	r0, [sp, #4]
 8000de6:	6813      	ldr	r3, [r2, #0]
 8000de8:	4615      	mov	r5, r2
 8000dea:	b933      	cbnz	r3, 8000dfa <_free_r+0x32>
 8000dec:	6063      	str	r3, [r4, #4]
 8000dee:	6014      	str	r4, [r2, #0]
 8000df0:	b003      	add	sp, #12
 8000df2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000df6:	f000 b941 	b.w	800107c <__malloc_unlock>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d90b      	bls.n	8000e16 <_free_r+0x4e>
 8000dfe:	6821      	ldr	r1, [r4, #0]
 8000e00:	1862      	adds	r2, r4, r1
 8000e02:	4293      	cmp	r3, r2
 8000e04:	bf04      	itt	eq
 8000e06:	681a      	ldreq	r2, [r3, #0]
 8000e08:	685b      	ldreq	r3, [r3, #4]
 8000e0a:	6063      	str	r3, [r4, #4]
 8000e0c:	bf04      	itt	eq
 8000e0e:	1852      	addeq	r2, r2, r1
 8000e10:	6022      	streq	r2, [r4, #0]
 8000e12:	602c      	str	r4, [r5, #0]
 8000e14:	e7ec      	b.n	8000df0 <_free_r+0x28>
 8000e16:	461a      	mov	r2, r3
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	b10b      	cbz	r3, 8000e20 <_free_r+0x58>
 8000e1c:	42a3      	cmp	r3, r4
 8000e1e:	d9fa      	bls.n	8000e16 <_free_r+0x4e>
 8000e20:	6811      	ldr	r1, [r2, #0]
 8000e22:	1855      	adds	r5, r2, r1
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	d10b      	bne.n	8000e40 <_free_r+0x78>
 8000e28:	6824      	ldr	r4, [r4, #0]
 8000e2a:	4421      	add	r1, r4
 8000e2c:	1854      	adds	r4, r2, r1
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	6011      	str	r1, [r2, #0]
 8000e32:	d1dd      	bne.n	8000df0 <_free_r+0x28>
 8000e34:	681c      	ldr	r4, [r3, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	6053      	str	r3, [r2, #4]
 8000e3a:	4421      	add	r1, r4
 8000e3c:	6011      	str	r1, [r2, #0]
 8000e3e:	e7d7      	b.n	8000df0 <_free_r+0x28>
 8000e40:	d902      	bls.n	8000e48 <_free_r+0x80>
 8000e42:	230c      	movs	r3, #12
 8000e44:	6003      	str	r3, [r0, #0]
 8000e46:	e7d3      	b.n	8000df0 <_free_r+0x28>
 8000e48:	6825      	ldr	r5, [r4, #0]
 8000e4a:	1961      	adds	r1, r4, r5
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	bf04      	itt	eq
 8000e50:	6819      	ldreq	r1, [r3, #0]
 8000e52:	685b      	ldreq	r3, [r3, #4]
 8000e54:	6063      	str	r3, [r4, #4]
 8000e56:	bf04      	itt	eq
 8000e58:	1949      	addeq	r1, r1, r5
 8000e5a:	6021      	streq	r1, [r4, #0]
 8000e5c:	6054      	str	r4, [r2, #4]
 8000e5e:	e7c7      	b.n	8000df0 <_free_r+0x28>
 8000e60:	b003      	add	sp, #12
 8000e62:	bd30      	pop	{r4, r5, pc}
 8000e64:	20000084 	.word	0x20000084

08000e68 <_malloc_r>:
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	1ccd      	adds	r5, r1, #3
 8000e6c:	f025 0503 	bic.w	r5, r5, #3
 8000e70:	3508      	adds	r5, #8
 8000e72:	2d0c      	cmp	r5, #12
 8000e74:	bf38      	it	cc
 8000e76:	250c      	movcc	r5, #12
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	4606      	mov	r6, r0
 8000e7c:	db01      	blt.n	8000e82 <_malloc_r+0x1a>
 8000e7e:	42a9      	cmp	r1, r5
 8000e80:	d903      	bls.n	8000e8a <_malloc_r+0x22>
 8000e82:	230c      	movs	r3, #12
 8000e84:	6033      	str	r3, [r6, #0]
 8000e86:	2000      	movs	r0, #0
 8000e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e8a:	f000 f8f1 	bl	8001070 <__malloc_lock>
 8000e8e:	4921      	ldr	r1, [pc, #132]	; (8000f14 <_malloc_r+0xac>)
 8000e90:	680a      	ldr	r2, [r1, #0]
 8000e92:	4614      	mov	r4, r2
 8000e94:	b99c      	cbnz	r4, 8000ebe <_malloc_r+0x56>
 8000e96:	4f20      	ldr	r7, [pc, #128]	; (8000f18 <_malloc_r+0xb0>)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b923      	cbnz	r3, 8000ea6 <_malloc_r+0x3e>
 8000e9c:	4621      	mov	r1, r4
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	f000 f83c 	bl	8000f1c <_sbrk_r>
 8000ea4:	6038      	str	r0, [r7, #0]
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	f000 f837 	bl	8000f1c <_sbrk_r>
 8000eae:	1c43      	adds	r3, r0, #1
 8000eb0:	d123      	bne.n	8000efa <_malloc_r+0x92>
 8000eb2:	230c      	movs	r3, #12
 8000eb4:	6033      	str	r3, [r6, #0]
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	f000 f8e0 	bl	800107c <__malloc_unlock>
 8000ebc:	e7e3      	b.n	8000e86 <_malloc_r+0x1e>
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	1b5b      	subs	r3, r3, r5
 8000ec2:	d417      	bmi.n	8000ef4 <_malloc_r+0x8c>
 8000ec4:	2b0b      	cmp	r3, #11
 8000ec6:	d903      	bls.n	8000ed0 <_malloc_r+0x68>
 8000ec8:	6023      	str	r3, [r4, #0]
 8000eca:	441c      	add	r4, r3
 8000ecc:	6025      	str	r5, [r4, #0]
 8000ece:	e004      	b.n	8000eda <_malloc_r+0x72>
 8000ed0:	6863      	ldr	r3, [r4, #4]
 8000ed2:	42a2      	cmp	r2, r4
 8000ed4:	bf0c      	ite	eq
 8000ed6:	600b      	streq	r3, [r1, #0]
 8000ed8:	6053      	strne	r3, [r2, #4]
 8000eda:	4630      	mov	r0, r6
 8000edc:	f000 f8ce 	bl	800107c <__malloc_unlock>
 8000ee0:	f104 000b 	add.w	r0, r4, #11
 8000ee4:	1d23      	adds	r3, r4, #4
 8000ee6:	f020 0007 	bic.w	r0, r0, #7
 8000eea:	1ac2      	subs	r2, r0, r3
 8000eec:	d0cc      	beq.n	8000e88 <_malloc_r+0x20>
 8000eee:	1a1b      	subs	r3, r3, r0
 8000ef0:	50a3      	str	r3, [r4, r2]
 8000ef2:	e7c9      	b.n	8000e88 <_malloc_r+0x20>
 8000ef4:	4622      	mov	r2, r4
 8000ef6:	6864      	ldr	r4, [r4, #4]
 8000ef8:	e7cc      	b.n	8000e94 <_malloc_r+0x2c>
 8000efa:	1cc4      	adds	r4, r0, #3
 8000efc:	f024 0403 	bic.w	r4, r4, #3
 8000f00:	42a0      	cmp	r0, r4
 8000f02:	d0e3      	beq.n	8000ecc <_malloc_r+0x64>
 8000f04:	1a21      	subs	r1, r4, r0
 8000f06:	4630      	mov	r0, r6
 8000f08:	f000 f808 	bl	8000f1c <_sbrk_r>
 8000f0c:	3001      	adds	r0, #1
 8000f0e:	d1dd      	bne.n	8000ecc <_malloc_r+0x64>
 8000f10:	e7cf      	b.n	8000eb2 <_malloc_r+0x4a>
 8000f12:	bf00      	nop
 8000f14:	20000084 	.word	0x20000084
 8000f18:	20000088 	.word	0x20000088

08000f1c <_sbrk_r>:
 8000f1c:	b538      	push	{r3, r4, r5, lr}
 8000f1e:	4d06      	ldr	r5, [pc, #24]	; (8000f38 <_sbrk_r+0x1c>)
 8000f20:	2300      	movs	r3, #0
 8000f22:	4604      	mov	r4, r0
 8000f24:	4608      	mov	r0, r1
 8000f26:	602b      	str	r3, [r5, #0]
 8000f28:	f7ff fb68 	bl	80005fc <_sbrk>
 8000f2c:	1c43      	adds	r3, r0, #1
 8000f2e:	d102      	bne.n	8000f36 <_sbrk_r+0x1a>
 8000f30:	682b      	ldr	r3, [r5, #0]
 8000f32:	b103      	cbz	r3, 8000f36 <_sbrk_r+0x1a>
 8000f34:	6023      	str	r3, [r4, #0]
 8000f36:	bd38      	pop	{r3, r4, r5, pc}
 8000f38:	20000098 	.word	0x20000098

08000f3c <__sread>:
 8000f3c:	b510      	push	{r4, lr}
 8000f3e:	460c      	mov	r4, r1
 8000f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f44:	f000 f8a0 	bl	8001088 <_read_r>
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	bfab      	itete	ge
 8000f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8000f50:	181b      	addge	r3, r3, r0
 8000f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f56:	bfac      	ite	ge
 8000f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f5a:	81a3      	strhlt	r3, [r4, #12]
 8000f5c:	bd10      	pop	{r4, pc}

08000f5e <__swrite>:
 8000f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f62:	461f      	mov	r7, r3
 8000f64:	898b      	ldrh	r3, [r1, #12]
 8000f66:	05db      	lsls	r3, r3, #23
 8000f68:	4605      	mov	r5, r0
 8000f6a:	460c      	mov	r4, r1
 8000f6c:	4616      	mov	r6, r2
 8000f6e:	d505      	bpl.n	8000f7c <__swrite+0x1e>
 8000f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f74:	2302      	movs	r3, #2
 8000f76:	2200      	movs	r2, #0
 8000f78:	f000 f868 	bl	800104c <_lseek_r>
 8000f7c:	89a3      	ldrh	r3, [r4, #12]
 8000f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f86:	81a3      	strh	r3, [r4, #12]
 8000f88:	4632      	mov	r2, r6
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f92:	f000 b817 	b.w	8000fc4 <_write_r>

08000f96 <__sseek>:
 8000f96:	b510      	push	{r4, lr}
 8000f98:	460c      	mov	r4, r1
 8000f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f9e:	f000 f855 	bl	800104c <_lseek_r>
 8000fa2:	1c43      	adds	r3, r0, #1
 8000fa4:	89a3      	ldrh	r3, [r4, #12]
 8000fa6:	bf15      	itete	ne
 8000fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8000faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000fb2:	81a3      	strheq	r3, [r4, #12]
 8000fb4:	bf18      	it	ne
 8000fb6:	81a3      	strhne	r3, [r4, #12]
 8000fb8:	bd10      	pop	{r4, pc}

08000fba <__sclose>:
 8000fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fbe:	f000 b813 	b.w	8000fe8 <_close_r>
	...

08000fc4 <_write_r>:
 8000fc4:	b538      	push	{r3, r4, r5, lr}
 8000fc6:	4d07      	ldr	r5, [pc, #28]	; (8000fe4 <_write_r+0x20>)
 8000fc8:	4604      	mov	r4, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4611      	mov	r1, r2
 8000fce:	2200      	movs	r2, #0
 8000fd0:	602a      	str	r2, [r5, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	f7ff fac1 	bl	800055a <_write>
 8000fd8:	1c43      	adds	r3, r0, #1
 8000fda:	d102      	bne.n	8000fe2 <_write_r+0x1e>
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	b103      	cbz	r3, 8000fe2 <_write_r+0x1e>
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
 8000fe4:	20000098 	.word	0x20000098

08000fe8 <_close_r>:
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	4d06      	ldr	r5, [pc, #24]	; (8001004 <_close_r+0x1c>)
 8000fec:	2300      	movs	r3, #0
 8000fee:	4604      	mov	r4, r0
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	602b      	str	r3, [r5, #0]
 8000ff4:	f7ff facd 	bl	8000592 <_close>
 8000ff8:	1c43      	adds	r3, r0, #1
 8000ffa:	d102      	bne.n	8001002 <_close_r+0x1a>
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	b103      	cbz	r3, 8001002 <_close_r+0x1a>
 8001000:	6023      	str	r3, [r4, #0]
 8001002:	bd38      	pop	{r3, r4, r5, pc}
 8001004:	20000098 	.word	0x20000098

08001008 <_fstat_r>:
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4d07      	ldr	r5, [pc, #28]	; (8001028 <_fstat_r+0x20>)
 800100c:	2300      	movs	r3, #0
 800100e:	4604      	mov	r4, r0
 8001010:	4608      	mov	r0, r1
 8001012:	4611      	mov	r1, r2
 8001014:	602b      	str	r3, [r5, #0]
 8001016:	f7ff fac8 	bl	80005aa <_fstat>
 800101a:	1c43      	adds	r3, r0, #1
 800101c:	d102      	bne.n	8001024 <_fstat_r+0x1c>
 800101e:	682b      	ldr	r3, [r5, #0]
 8001020:	b103      	cbz	r3, 8001024 <_fstat_r+0x1c>
 8001022:	6023      	str	r3, [r4, #0]
 8001024:	bd38      	pop	{r3, r4, r5, pc}
 8001026:	bf00      	nop
 8001028:	20000098 	.word	0x20000098

0800102c <_isatty_r>:
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4d06      	ldr	r5, [pc, #24]	; (8001048 <_isatty_r+0x1c>)
 8001030:	2300      	movs	r3, #0
 8001032:	4604      	mov	r4, r0
 8001034:	4608      	mov	r0, r1
 8001036:	602b      	str	r3, [r5, #0]
 8001038:	f7ff fac7 	bl	80005ca <_isatty>
 800103c:	1c43      	adds	r3, r0, #1
 800103e:	d102      	bne.n	8001046 <_isatty_r+0x1a>
 8001040:	682b      	ldr	r3, [r5, #0]
 8001042:	b103      	cbz	r3, 8001046 <_isatty_r+0x1a>
 8001044:	6023      	str	r3, [r4, #0]
 8001046:	bd38      	pop	{r3, r4, r5, pc}
 8001048:	20000098 	.word	0x20000098

0800104c <_lseek_r>:
 800104c:	b538      	push	{r3, r4, r5, lr}
 800104e:	4d07      	ldr	r5, [pc, #28]	; (800106c <_lseek_r+0x20>)
 8001050:	4604      	mov	r4, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4611      	mov	r1, r2
 8001056:	2200      	movs	r2, #0
 8001058:	602a      	str	r2, [r5, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	f7ff fac0 	bl	80005e0 <_lseek>
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	d102      	bne.n	800106a <_lseek_r+0x1e>
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	b103      	cbz	r3, 800106a <_lseek_r+0x1e>
 8001068:	6023      	str	r3, [r4, #0]
 800106a:	bd38      	pop	{r3, r4, r5, pc}
 800106c:	20000098 	.word	0x20000098

08001070 <__malloc_lock>:
 8001070:	4801      	ldr	r0, [pc, #4]	; (8001078 <__malloc_lock+0x8>)
 8001072:	f7ff be43 	b.w	8000cfc <__retarget_lock_acquire_recursive>
 8001076:	bf00      	nop
 8001078:	20000090 	.word	0x20000090

0800107c <__malloc_unlock>:
 800107c:	4801      	ldr	r0, [pc, #4]	; (8001084 <__malloc_unlock+0x8>)
 800107e:	f7ff be3e 	b.w	8000cfe <__retarget_lock_release_recursive>
 8001082:	bf00      	nop
 8001084:	20000090 	.word	0x20000090

08001088 <_read_r>:
 8001088:	b538      	push	{r3, r4, r5, lr}
 800108a:	4d07      	ldr	r5, [pc, #28]	; (80010a8 <_read_r+0x20>)
 800108c:	4604      	mov	r4, r0
 800108e:	4608      	mov	r0, r1
 8001090:	4611      	mov	r1, r2
 8001092:	2200      	movs	r2, #0
 8001094:	602a      	str	r2, [r5, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	f7ff fa42 	bl	8000520 <_read>
 800109c:	1c43      	adds	r3, r0, #1
 800109e:	d102      	bne.n	80010a6 <_read_r+0x1e>
 80010a0:	682b      	ldr	r3, [r5, #0]
 80010a2:	b103      	cbz	r3, 80010a6 <_read_r+0x1e>
 80010a4:	6023      	str	r3, [r4, #0]
 80010a6:	bd38      	pop	{r3, r4, r5, pc}
 80010a8:	20000098 	.word	0x20000098

080010ac <_init>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	bf00      	nop
 80010b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b2:	bc08      	pop	{r3}
 80010b4:	469e      	mov	lr, r3
 80010b6:	4770      	bx	lr

080010b8 <_fini>:
 80010b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ba:	bf00      	nop
 80010bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010be:	bc08      	pop	{r3}
 80010c0:	469e      	mov	lr, r3
 80010c2:	4770      	bx	lr
