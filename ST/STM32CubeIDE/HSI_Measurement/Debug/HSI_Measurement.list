
HSI_Measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000170  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000338  08000340  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000338  08000338  00010340  2**0
                  CONTENTS
  4 .ARM          00000000  08000338  08000338  00010340  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000338  08000340  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800033c  0800033c  0001033c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000340  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000340  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010340  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000107  00000000  00000000  00010370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000086  00000000  00000000  00010477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00010500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  00010548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f7c  00000000  00000000  00010578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000400  00000000  00000000  000114f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003cb5  00000000  00000000  000118f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000155a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000155fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000320 	.word	0x08000320

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000320 	.word	0x08000320

08000208 <main>:
#define RCC_BASE_ADDR		0x40023800UL
#define RCC_CFGR_REG_OFFSET	0x08UL
#define RCC_CFGR_REG_ADDR	(RCC_BASE_ADDR + RCC_CFGR_REG_OFFSET)
#define GPIOA_BASE_ADDR		0x40020000UL
int main(void)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
	uint32_t *pRccCfgrReg = (uint32_t*)RCC_CFGR_REG_ADDR;
 800020e:	4b19      	ldr	r3, [pc, #100]	; (8000274 <main+0x6c>)
 8000210:	60fb      	str	r3, [r7, #12]
	//1. Configurar el registro RCC_CFGR
	*pRccCfgrReg &= ~(0x3 << 21); //Limpiar bits 21 y 22
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	601a      	str	r2, [r3, #0]

	//Configurar el prescaler de MCO1
	*pRccCfgrReg |= (1 << 25);
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg |= (1 << 26);
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	601a      	str	r2, [r3, #0]

	//2. Configurar PA8 a modo AF0 para comportarse como señal MCO1
	//a. Habilitar el reloj periférico para el periférico GPIOA
	uint32_t *pRCCAhb1Enr = (uint32_t*)(RCC_BASE_ADDR + 0x30);
 8000236:	4b10      	ldr	r3, [pc, #64]	; (8000278 <main+0x70>)
 8000238:	60bb      	str	r3, [r7, #8]
	*pRCCAhb1Enr |= (1 << 0);	//Habilito el reloj periférico GPIOA
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 0201 	orr.w	r2, r3, #1
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	601a      	str	r2, [r3, #0]

	//b. Configurar el modo del pin 8 GPIOA como un modo de funcion alternativa.
	uint32_t *pGPIOAModeReg = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 8000246:	4b0d      	ldr	r3, [pc, #52]	; (800027c <main+0x74>)
 8000248:	607b      	str	r3, [r7, #4]
	*pGPIOAModeReg &= ~(0x3 << 16); //Limpiar
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	601a      	str	r2, [r3, #0]
	*pGPIOAModeReg |= (0x2 << 16);  //Setear
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]

	//c. Configurar el registro de función alternativa para setear el modo 0 para PA8
	uint32_t *pGIOAAltFunHighReg = (uint32_t*)(GPIOA_BASE_ADDR + 0x24);
 8000262:	4b07      	ldr	r3, [pc, #28]	; (8000280 <main+0x78>)
 8000264:	603b      	str	r3, [r7, #0]
	*pGIOAAltFunHighReg &= ~(0xF << 0);
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f023 020f 	bic.w	r2, r3, #15
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	601a      	str	r2, [r3, #0]

	/* Loop forever */
	for(;;);
 8000272:	e7fe      	b.n	8000272 <main+0x6a>
 8000274:	40023808 	.word	0x40023808
 8000278:	40023830 	.word	0x40023830
 800027c:	40020000 	.word	0x40020000
 8000280:	40020024 	.word	0x40020024

08000284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000286:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800028e:	490d      	ldr	r1, [pc, #52]	; (80002c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <LoopForever+0xe>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800029c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a2:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a4:	4c0a      	ldr	r4, [pc, #40]	; (80002d0 <LoopForever+0x16>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b2:	f000 f811 	bl	80002d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ffa7 	bl	8000208 <main>

080002ba <LoopForever>:

LoopForever:
    b LoopForever
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
  ldr   r0, =_estack
 80002bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c8:	08000340 	.word	0x08000340
  ldr r2, =_sbss
 80002cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC_IRQHandler>
	...

080002d8 <__libc_init_array>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	4d0d      	ldr	r5, [pc, #52]	; (8000310 <__libc_init_array+0x38>)
 80002dc:	4c0d      	ldr	r4, [pc, #52]	; (8000314 <__libc_init_array+0x3c>)
 80002de:	1b64      	subs	r4, r4, r5
 80002e0:	10a4      	asrs	r4, r4, #2
 80002e2:	2600      	movs	r6, #0
 80002e4:	42a6      	cmp	r6, r4
 80002e6:	d109      	bne.n	80002fc <__libc_init_array+0x24>
 80002e8:	4d0b      	ldr	r5, [pc, #44]	; (8000318 <__libc_init_array+0x40>)
 80002ea:	4c0c      	ldr	r4, [pc, #48]	; (800031c <__libc_init_array+0x44>)
 80002ec:	f000 f818 	bl	8000320 <_init>
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	10a4      	asrs	r4, r4, #2
 80002f4:	2600      	movs	r6, #0
 80002f6:	42a6      	cmp	r6, r4
 80002f8:	d105      	bne.n	8000306 <__libc_init_array+0x2e>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000300:	4798      	blx	r3
 8000302:	3601      	adds	r6, #1
 8000304:	e7ee      	b.n	80002e4 <__libc_init_array+0xc>
 8000306:	f855 3b04 	ldr.w	r3, [r5], #4
 800030a:	4798      	blx	r3
 800030c:	3601      	adds	r6, #1
 800030e:	e7f2      	b.n	80002f6 <__libc_init_array+0x1e>
 8000310:	08000338 	.word	0x08000338
 8000314:	08000338 	.word	0x08000338
 8000318:	08000338 	.word	0x08000338
 800031c:	0800033c 	.word	0x0800033c

08000320 <_init>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

0800032c <_fini>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr
