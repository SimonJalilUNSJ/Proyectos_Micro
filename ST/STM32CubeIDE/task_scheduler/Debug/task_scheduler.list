
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001048  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08001210  08001210  00011210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001318  08001318  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001318  08001318  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001318  08001318  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001318  08001318  00011318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800131c  0800131c  0001131c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000068  08001388  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08001388  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002702  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000074c  00000000  00000000  00022794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00022ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  000230a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c81  00000000  00000000  00023238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015ea  00000000  00000000  00025eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009c39  00000000  00000000  000274a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000310dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ca8  00000000  00000000  00031130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000068 	.word	0x20000068
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080011f8 	.word	0x080011f8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000006c 	.word	0x2000006c
 8000204:	080011f8 	.word	0x080011f8

08000208 <main>:
}TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	enable_processor_faults();
 800020c:	f000 f8fc 	bl	8000408 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 8000210:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0x24>)
 8000212:	f000 f867 	bl	80002e4 <init_scheduler_stack>
	//task_handler[0] = (uint32_t)task1_handler;
	//task_handler[1] = (uint32_t)task2_handler;
	//task_handler[2] = (uint32_t)task3_handler;
	//task_handler[3] = (uint32_t)task4_handler;

	init_task_stack();
 8000216:	f000 f869 	bl	80002ec <init_task_stack>

	init_systick_timer(TICK_HZ);
 800021a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021e:	f000 f82b 	bl	8000278 <init_systick_timer>

	switch_sp_to_psp();
 8000222:	f000 f98f 	bl	8000544 <switch_sp_to_psp>

	task1_handler();
 8000226:	f000 f807 	bl	8000238 <task1_handler>

    /* Loop forever */
	for(;;);
 800022a:	e7fe      	b.n	800022a <main+0x22>
 800022c:	20006c00 	.word	0x20006c00

08000230 <idle_task>:
}

void idle_task (void){
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	while(1);
 8000234:	e7fe      	b.n	8000234 <idle_task+0x4>
	...

08000238 <task1_handler>:
}

void task1_handler(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	while(1){
		printf("Esta es la tarea 1.\n");
 800023c:	4801      	ldr	r0, [pc, #4]	; (8000244 <task1_handler+0xc>)
 800023e:	f000 fb85 	bl	800094c <puts>
 8000242:	e7fb      	b.n	800023c <task1_handler+0x4>
 8000244:	08001210 	.word	0x08001210

08000248 <task2_handler>:
	}
}

void task2_handler(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	while(1){
		printf("Esta es la tarea 2.\n");
 800024c:	4801      	ldr	r0, [pc, #4]	; (8000254 <task2_handler+0xc>)
 800024e:	f000 fb7d 	bl	800094c <puts>
 8000252:	e7fb      	b.n	800024c <task2_handler+0x4>
 8000254:	08001224 	.word	0x08001224

08000258 <task3_handler>:
	}
}

void task3_handler(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	while(1){
		printf("Esta es la tarea 3.\n");
 800025c:	4801      	ldr	r0, [pc, #4]	; (8000264 <task3_handler+0xc>)
 800025e:	f000 fb75 	bl	800094c <puts>
 8000262:	e7fb      	b.n	800025c <task3_handler+0x4>
 8000264:	08001238 	.word	0x08001238

08000268 <task4_handler>:
	}
}

void task4_handler(void){
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	while(1){
		printf("Esta es la tarea 4.\n");
 800026c:	4801      	ldr	r0, [pc, #4]	; (8000274 <task4_handler+0xc>)
 800026e:	f000 fb6d 	bl	800094c <puts>
 8000272:	e7fb      	b.n	800026c <task4_handler+0x4>
 8000274:	0800124c 	.word	0x0800124c

08000278 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz){
 8000278:	b480      	push	{r7}
 800027a:	b087      	sub	sp, #28
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000280:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <init_systick_timer+0x60>)
 8000282:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <init_systick_timer+0x64>)
 8000286:	613b      	str	r3, [r7, #16]

	uint32_t count_value = SYSTICK_TIM_CLK/tick_hz;
 8000288:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <init_systick_timer+0x68>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000290:	60fb      	str	r3, [r7, #12]

	//Limpiar el valor de SVR
	*pSRVR &= ~(0x00FFFFFF);
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	601a      	str	r2, [r3, #0]

	//Cargar el valor de SVR
	*pSRVR |= count_value;
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	431a      	orrs	r2, r3
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	601a      	str	r2, [r3, #0]

	//Hacer algunos ajustes
	*pSCSR |= (1 << 1);	//Habilita el pedido de excepcion systick
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f043 0202 	orr.w	r2, r3, #2
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //Indica la fuente del clock, en este caso interno
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f043 0204 	orr.w	r2, r3, #4
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	601a      	str	r2, [r3, #0]

	//Habilita el contador
	*pSCSR |= (1 << 0);
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0201 	orr.w	r2, r3, #1
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	601a      	str	r2, [r3, #0]
}
 80002ce:	bf00      	nop
 80002d0:	371c      	adds	r7, #28
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	e000e014 	.word	0xe000e014
 80002dc:	e000e010 	.word	0xe000e010
 80002e0:	00f42400 	.word	0x00f42400

080002e4 <init_scheduler_stack>:

__attribute((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
	//__asm volatile("mrs MSP,%0": : "r" (sched_top_of_stack) : );
	__asm volatile ("MSR MSP,R3");
 80002e4:	f383 8808 	msr	MSP, r3
	__asm volatile ("BX LR");
 80002e8:	4770      	bx	lr
}
 80002ea:	bf00      	nop

080002ec <init_task_stack>:

void init_task_stack(void){
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_READY_STATE;
 80002f2:	4b3a      	ldr	r3, [pc, #232]	; (80003dc <init_task_stack+0xf0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 80002f8:	4b38      	ldr	r3, [pc, #224]	; (80003dc <init_task_stack+0xf0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 80002fe:	4b37      	ldr	r3, [pc, #220]	; (80003dc <init_task_stack+0xf0>)
 8000300:	2200      	movs	r2, #0
 8000302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000306:	4b35      	ldr	r3, [pc, #212]	; (80003dc <init_task_stack+0xf0>)
 8000308:	2200      	movs	r2, #0
 800030a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 800030e:	4b33      	ldr	r3, [pc, #204]	; (80003dc <init_task_stack+0xf0>)
 8000310:	2200      	movs	r2, #0
 8000312:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value	= IDLE_STACK_START;
 8000316:	4b31      	ldr	r3, [pc, #196]	; (80003dc <init_task_stack+0xf0>)
 8000318:	4a31      	ldr	r2, [pc, #196]	; (80003e0 <init_task_stack+0xf4>)
 800031a:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value	= T1_STACK_START;
 800031c:	4b2f      	ldr	r3, [pc, #188]	; (80003dc <init_task_stack+0xf0>)
 800031e:	4a31      	ldr	r2, [pc, #196]	; (80003e4 <init_task_stack+0xf8>)
 8000320:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value	= T2_STACK_START;
 8000322:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <init_task_stack+0xf0>)
 8000324:	4a30      	ldr	r2, [pc, #192]	; (80003e8 <init_task_stack+0xfc>)
 8000326:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value	= T3_STACK_START;
 8000328:	4b2c      	ldr	r3, [pc, #176]	; (80003dc <init_task_stack+0xf0>)
 800032a:	4a30      	ldr	r2, [pc, #192]	; (80003ec <init_task_stack+0x100>)
 800032c:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value	= T4_STACK_START;
 800032e:	4b2b      	ldr	r3, [pc, #172]	; (80003dc <init_task_stack+0xf0>)
 8000330:	4a2f      	ldr	r2, [pc, #188]	; (80003f0 <init_task_stack+0x104>)
 8000332:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000334:	4b29      	ldr	r3, [pc, #164]	; (80003dc <init_task_stack+0xf0>)
 8000336:	4a2f      	ldr	r2, [pc, #188]	; (80003f4 <init_task_stack+0x108>)
 8000338:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 800033a:	4b28      	ldr	r3, [pc, #160]	; (80003dc <init_task_stack+0xf0>)
 800033c:	4a2e      	ldr	r2, [pc, #184]	; (80003f8 <init_task_stack+0x10c>)
 800033e:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000340:	4b26      	ldr	r3, [pc, #152]	; (80003dc <init_task_stack+0xf0>)
 8000342:	4a2e      	ldr	r2, [pc, #184]	; (80003fc <init_task_stack+0x110>)
 8000344:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000346:	4b25      	ldr	r3, [pc, #148]	; (80003dc <init_task_stack+0xf0>)
 8000348:	4a2d      	ldr	r2, [pc, #180]	; (8000400 <init_task_stack+0x114>)
 800034a:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 800034c:	4b23      	ldr	r3, [pc, #140]	; (80003dc <init_task_stack+0xf0>)
 800034e:	4a2d      	ldr	r2, [pc, #180]	; (8000404 <init_task_stack+0x118>)
 8000350:	64da      	str	r2, [r3, #76]	; 0x4c

	uint32_t *pPSP;
	for(int i = 0; i < MAX_TASKS; i++){
 8000352:	2300      	movs	r3, #0
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	e037      	b.n	80003c8 <init_task_stack+0xdc>
		//pPSP =(uint32_t *) psp_of_stacks[i];

		pPSP = (uint32_t *)user_tasks[i].psp_value;
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <init_task_stack+0xf0>)
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	011b      	lsls	r3, r3, #4
 800035e:	4413      	add	r3, r2
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	60fb      	str	r3, [r7, #12]

		pPSP--;	//XPSR
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	3b04      	subs	r3, #4
 8000368:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0x00100000
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000370:	601a      	str	r2, [r3, #0]

		pPSP--;//PC
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	3b04      	subs	r3, #4
 8000376:	60fb      	str	r3, [r7, #12]
		//*pPSP = task_handler[i];
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 8000378:	4a18      	ldr	r2, [pc, #96]	; (80003dc <init_task_stack+0xf0>)
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	011b      	lsls	r3, r3, #4
 800037e:	4413      	add	r3, r2
 8000380:	330c      	adds	r3, #12
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	461a      	mov	r2, r3
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	601a      	str	r2, [r3, #0]

		pPSP--;//LR
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	3b04      	subs	r3, #4
 800038e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f06f 0202 	mvn.w	r2, #2
 8000396:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j > 0 ; j++){
 8000398:	2300      	movs	r3, #0
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	e008      	b.n	80003b0 <init_task_stack+0xc4>
			pPSP--;//Registros
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	3b04      	subs	r3, #4
 80003a2:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j > 0 ; j++){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	3301      	adds	r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	dcf3      	bgt.n	800039e <init_task_stack+0xb2>
		}

		//psp_of_stacks[i] = (uint32_t)pPSP;
		user_tasks[i].psp_value = (uint32_t)pPSP;
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	4908      	ldr	r1, [pc, #32]	; (80003dc <init_task_stack+0xf0>)
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	011b      	lsls	r3, r3, #4
 80003be:	440b      	add	r3, r1
 80003c0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++){
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	3301      	adds	r3, #1
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	2b04      	cmp	r3, #4
 80003cc:	ddc4      	ble.n	8000358 <init_task_stack+0x6c>
	}
}
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000094 	.word	0x20000094
 80003e0:	20007000 	.word	0x20007000
 80003e4:	20008000 	.word	0x20008000
 80003e8:	20007c00 	.word	0x20007c00
 80003ec:	20007800 	.word	0x20007800
 80003f0:	20007400 	.word	0x20007400
 80003f4:	08000231 	.word	0x08000231
 80003f8:	08000239 	.word	0x08000239
 80003fc:	08000249 	.word	0x08000249
 8000400:	08000259 	.word	0x08000259
 8000404:	08000269 	.word	0x08000269

08000408 <enable_processor_faults>:

void enable_processor_faults(void){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
	//Habilitar todas las excepciones configurables como error de uso,
	//error de manejo de memoria y error de bus
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <enable_processor_faults+0x38>)
 8000410:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16);	//manejo de memoria
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17);	//error de bus
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18);	//error de uso
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	601a      	str	r2, [r3, #0]
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	e000ed24 	.word	0xe000ed24

08000444 <HardFault_Handler>:

//Implementar los manipuladores de errores.
void HardFault_Handler(void){
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	printf("Excepción : Hardfault\n");
 8000448:	4801      	ldr	r0, [pc, #4]	; (8000450 <HardFault_Handler+0xc>)
 800044a:	f000 fa7f 	bl	800094c <puts>
	while(1);
 800044e:	e7fe      	b.n	800044e <HardFault_Handler+0xa>
 8000450:	08001260 	.word	0x08001260

08000454 <MemManage_Handler>:
}

void MemManage_Handler(void){
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	printf("Excepción : Manejo de memoria\n");
 8000458:	4801      	ldr	r0, [pc, #4]	; (8000460 <MemManage_Handler+0xc>)
 800045a:	f000 fa77 	bl	800094c <puts>
	while(1);
 800045e:	e7fe      	b.n	800045e <MemManage_Handler+0xa>
 8000460:	08001278 	.word	0x08001278

08000464 <BusFault_Handler>:
}

void BusFault_Handler(void){
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	printf("Excepción : Error de bus\n");
 8000468:	4801      	ldr	r0, [pc, #4]	; (8000470 <BusFault_Handler+0xc>)
 800046a:	f000 fa6f 	bl	800094c <puts>
	while(1);
 800046e:	e7fe      	b.n	800046e <BusFault_Handler+0xa>
 8000470:	08001298 	.word	0x08001298

08000474 <get_psp_value>:
}

uint32_t get_psp_value(void){
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
	//return psp_of_stacks[current_task];
	return user_tasks[current_task].psp_value;
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <get_psp_value+0x18>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <get_psp_value+0x1c>)
 800047e:	011b      	lsls	r3, r3, #4
 8000480:	4413      	add	r3, r2
 8000482:	681b      	ldr	r3, [r3, #0]
}
 8000484:	4618      	mov	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	20000000 	.word	0x20000000
 8000490:	20000094 	.word	0x20000094

08000494 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	//psp_of_stacks[current_task] = current_psp_value;
	user_tasks[current_task].psp_value = current_psp_value;
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <save_psp_value+0x20>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <save_psp_value+0x24>)
 80004a2:	011b      	lsls	r3, r3, #4
 80004a4:	4413      	add	r3, r2
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	601a      	str	r2, [r3, #0]
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	20000000 	.word	0x20000000
 80004b8:	20000094 	.word	0x20000094

080004bc <update_next_task>:

//Round-robin
void update_next_task(void){
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80004c2:	23ff      	movs	r3, #255	; 0xff
 80004c4:	607b      	str	r3, [r7, #4]

	for(int i = 0; i < (MAX_TASKS); i++){
 80004c6:	2300      	movs	r3, #0
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	e024      	b.n	8000516 <update_next_task+0x5a>
		current_task++;
 80004cc:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <update_next_task+0x7c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	4b18      	ldr	r3, [pc, #96]	; (8000538 <update_next_task+0x7c>)
 80004d6:	701a      	strb	r2, [r3, #0]
		current_task = current_task % MAX_TASKS;
 80004d8:	4b17      	ldr	r3, [pc, #92]	; (8000538 <update_next_task+0x7c>)
 80004da:	781a      	ldrb	r2, [r3, #0]
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <update_next_task+0x80>)
 80004de:	fba3 1302 	umull	r1, r3, r3, r2
 80004e2:	0899      	lsrs	r1, r3, #2
 80004e4:	460b      	mov	r3, r1
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	440b      	add	r3, r1
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <update_next_task+0x7c>)
 80004f0:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <update_next_task+0x7c>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	4a12      	ldr	r2, [pc, #72]	; (8000540 <update_next_task+0x84>)
 80004f8:	011b      	lsls	r3, r3, #4
 80004fa:	4413      	add	r3, r2
 80004fc:	3308      	adds	r3, #8
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	607b      	str	r3, [r7, #4]
		if((state == TASK_READY_STATE) && (current_task != 0))
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d103      	bne.n	8000510 <update_next_task+0x54>
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <update_next_task+0x7c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d106      	bne.n	800051e <update_next_task+0x62>
	for(int i = 0; i < (MAX_TASKS); i++){
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b04      	cmp	r3, #4
 800051a:	ddd7      	ble.n	80004cc <update_next_task+0x10>
 800051c:	e000      	b.n	8000520 <update_next_task+0x64>
			break;
 800051e:	bf00      	nop
	}

	if (state != TASK_READY_STATE)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <update_next_task+0x70>
		current_task = 0;
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <update_next_task+0x7c>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000000 	.word	0x20000000
 800053c:	cccccccd 	.word	0xcccccccd
 8000540:	20000094 	.word	0x20000094

08000544 <switch_sp_to_psp>:

__attribute((naked)) void switch_sp_to_psp(void){
	//1. Inicializar el PSP con la dirección de TASK1 stack start

	//Obtener el valor de psp de la tarea actual
	__asm volatile ("PUSH {LR}");	//Preservar LR que contiene la vuelta a un main().
 8000544:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 8000546:	f7ff ff95 	bl	8000474 <get_psp_value>
	__asm volatile ("MSR PSP,R0");	//Inicializar PSP.
 800054a:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");	//Desapila el valor LR
 800054e:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. Cambiar SP a PSP usando el registro de control
	__asm volatile ("MOV R0,#0x02");
 8000552:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 8000556:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800055a:	4770      	bx	lr
}
 800055c:	bf00      	nop

0800055e <PendSV_Handler>:
}

__attribute((naked)) void PendSV_Handler(){
	/*Guardar el contexto de la actual tarea*/
	//1. Obtener el valor PSP de la tarea que se esta ejecutando
	__asm volatile ("MRS R0,PSP");
 800055e:	f3ef 8009 	mrs	r0, PSP
	//2. Usar el valor PSP para almacenar SF2 (R4 a R11)
	__asm volatile ("STMDB R0!,{R4-R11}"); //El signo de exclamación sirve para actualizar la dirección en R0.
 8000562:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile ("PUSH {LR}");
 8000566:	b500      	push	{lr}
	//3.Salvar el valor actual de PSP
	__asm volatile ("BL save_psp_value");
 8000568:	f7ff ff94 	bl	8000494 <save_psp_value>

	/*Recuperar el contexto de la siguiente tarea*/
	//1. Decidir la siguiente tarea a ser ejecutada.
	__asm volatile ("BL update_next_task");
 800056c:	f7ff ffa6 	bl	80004bc <update_next_task>
	//2. Obtener su valor PSP pasado.
	__asm volatile ("BL get_psp_value");
 8000570:	f7ff ff80 	bl	8000474 <get_psp_value>
	//3. Usar el valor PSP para recuperar SF2(R4 a R11).
	__asm volatile ("LDMIA R0!,{R4-R11}");
 8000574:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//4. Actualizar PSP y salga.
	__asm volatile ("MRS R0,PSP");
 8000578:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("POP {LR}");
 800057c:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("BX LR");
 8000580:	4770      	bx	lr
}
 8000582:	bf00      	nop

08000584 <update_global_tick_count>:

void update_global_tick_count(void){
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <update_global_tick_count+0x18>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	4a03      	ldr	r2, [pc, #12]	; (800059c <update_global_tick_count+0x18>)
 8000590:	6013      	str	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000084 	.word	0x20000084

080005a0 <unblock_tasks>:

void unblock_tasks(void){
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_TASKS; i++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	e01b      	b.n	80005e4 <unblock_tasks+0x44>
		if(user_tasks[i].current_state != TASK_READY_STATE){
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <unblock_tasks+0x58>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	4413      	add	r3, r2
 80005b4:	3308      	adds	r3, #8
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d010      	beq.n	80005de <unblock_tasks+0x3e>
			if(user_tasks[i].block_count == g_tick_count){
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <unblock_tasks+0x58>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	011b      	lsls	r3, r3, #4
 80005c2:	4413      	add	r3, r2
 80005c4:	3304      	adds	r3, #4
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <unblock_tasks+0x5c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d106      	bne.n	80005de <unblock_tasks+0x3e>
				user_tasks[i].current_state = TASK_READY_STATE;
 80005d0:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <unblock_tasks+0x58>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	4413      	add	r3, r2
 80005d8:	3308      	adds	r3, #8
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++){
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3301      	adds	r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	dde0      	ble.n	80005ac <unblock_tasks+0xc>
			}
		}
	}
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000094 	.word	0x20000094
 80005fc:	20000084 	.word	0x20000084

08000600 <SysTick_Handler>:

void SysTick_Handler(void){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <SysTick_Handler+0x28>)
 8000608:	607b      	str	r3, [r7, #4]

	update_global_tick_count();
 800060a:	f7ff ffbb 	bl	8000584 <update_global_tick_count>
	unblock_tasks();
 800060e:	f7ff ffc7 	bl	80005a0 <unblock_tasks>
	//Poner pendiente la excepción PendSV
	*pICSR |= (1 << 28);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	601a      	str	r2, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	e000ed04 	.word	0xe000ed04

0800062c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <ITM_SendChar+0x44>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <ITM_SendChar+0x44>)
 800063c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000640:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <ITM_SendChar+0x48>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <ITM_SendChar+0x48>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800064e:	bf00      	nop
 8000650:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f8      	beq.n	8000650 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800065e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	6013      	str	r3, [r2, #0]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	e000edfc 	.word	0xe000edfc
 8000674:	e0000e00 	.word	0xe0000e00

08000678 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	e00a      	b.n	80006a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800068a:	f3af 8000 	nop.w
 800068e:	4601      	mov	r1, r0
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	60ba      	str	r2, [r7, #8]
 8000696:	b2ca      	uxtb	r2, r1
 8000698:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	3301      	adds	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	dbf0      	blt.n	800068a <_read+0x12>
	}

return len;
 80006a8:	687b      	ldr	r3, [r7, #4]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b086      	sub	sp, #24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e009      	b.n	80006d8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	60ba      	str	r2, [r7, #8]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ffad 	bl	800062c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbf1      	blt.n	80006c4 <_write+0x12>
	}
	return len;
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_close>:

int _close(int file)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
	return -1;
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000710:	605a      	str	r2, [r3, #4]
	return 0;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <_isatty>:

int _isatty(int file)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
	return 1;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000732:	b480      	push	{r7}
 8000734:	b085      	sub	sp, #20
 8000736:	af00      	add	r7, sp, #0
 8000738:	60f8      	str	r0, [r7, #12]
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
	return 0;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
	...

0800074c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <_sbrk+0x5c>)
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <_sbrk+0x60>)
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <_sbrk+0x64>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <_sbrk+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	429a      	cmp	r2, r3
 800077a:	d207      	bcs.n	800078c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800077c:	f000 f846 	bl	800080c <__errno>
 8000780:	4603      	mov	r3, r0
 8000782:	220c      	movs	r2, #12
 8000784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800078a:	e009      	b.n	80007a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <_sbrk+0x64>)
 800079c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800079e:	68fb      	ldr	r3, [r7, #12]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20008000 	.word	0x20008000
 80007ac:	00000400 	.word	0x00000400
 80007b0:	20000088 	.word	0x20000088
 80007b4:	200000f8 	.word	0x200000f8

080007b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ba:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	; (80007f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <LoopForever+0xe>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	; (8000804 <LoopForever+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007e6:	f000 f817 	bl	8000818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ea:	f7ff fd0d 	bl	8000208 <main>

080007ee <LoopForever>:

LoopForever:
    b LoopForever
 80007ee:	e7fe      	b.n	80007ee <LoopForever>
  ldr   r0, =_estack
 80007f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007fc:	08001320 	.word	0x08001320
  ldr r2, =_sbss
 8000800:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000804:	200000f4 	.word	0x200000f4

08000808 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC_IRQHandler>
	...

0800080c <__errno>:
 800080c:	4b01      	ldr	r3, [pc, #4]	; (8000814 <__errno+0x8>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000004 	.word	0x20000004

08000818 <__libc_init_array>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	4d0d      	ldr	r5, [pc, #52]	; (8000850 <__libc_init_array+0x38>)
 800081c:	4c0d      	ldr	r4, [pc, #52]	; (8000854 <__libc_init_array+0x3c>)
 800081e:	1b64      	subs	r4, r4, r5
 8000820:	10a4      	asrs	r4, r4, #2
 8000822:	2600      	movs	r6, #0
 8000824:	42a6      	cmp	r6, r4
 8000826:	d109      	bne.n	800083c <__libc_init_array+0x24>
 8000828:	4d0b      	ldr	r5, [pc, #44]	; (8000858 <__libc_init_array+0x40>)
 800082a:	4c0c      	ldr	r4, [pc, #48]	; (800085c <__libc_init_array+0x44>)
 800082c:	f000 fce4 	bl	80011f8 <_init>
 8000830:	1b64      	subs	r4, r4, r5
 8000832:	10a4      	asrs	r4, r4, #2
 8000834:	2600      	movs	r6, #0
 8000836:	42a6      	cmp	r6, r4
 8000838:	d105      	bne.n	8000846 <__libc_init_array+0x2e>
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000840:	4798      	blx	r3
 8000842:	3601      	adds	r6, #1
 8000844:	e7ee      	b.n	8000824 <__libc_init_array+0xc>
 8000846:	f855 3b04 	ldr.w	r3, [r5], #4
 800084a:	4798      	blx	r3
 800084c:	3601      	adds	r6, #1
 800084e:	e7f2      	b.n	8000836 <__libc_init_array+0x1e>
 8000850:	08001318 	.word	0x08001318
 8000854:	08001318 	.word	0x08001318
 8000858:	08001318 	.word	0x08001318
 800085c:	0800131c 	.word	0x0800131c

08000860 <memset>:
 8000860:	4402      	add	r2, r0
 8000862:	4603      	mov	r3, r0
 8000864:	4293      	cmp	r3, r2
 8000866:	d100      	bne.n	800086a <memset+0xa>
 8000868:	4770      	bx	lr
 800086a:	f803 1b01 	strb.w	r1, [r3], #1
 800086e:	e7f9      	b.n	8000864 <memset+0x4>

08000870 <_puts_r>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	460e      	mov	r6, r1
 8000874:	4605      	mov	r5, r0
 8000876:	b118      	cbz	r0, 8000880 <_puts_r+0x10>
 8000878:	6983      	ldr	r3, [r0, #24]
 800087a:	b90b      	cbnz	r3, 8000880 <_puts_r+0x10>
 800087c:	f000 fa48 	bl	8000d10 <__sinit>
 8000880:	69ab      	ldr	r3, [r5, #24]
 8000882:	68ac      	ldr	r4, [r5, #8]
 8000884:	b913      	cbnz	r3, 800088c <_puts_r+0x1c>
 8000886:	4628      	mov	r0, r5
 8000888:	f000 fa42 	bl	8000d10 <__sinit>
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <_puts_r+0xd0>)
 800088e:	429c      	cmp	r4, r3
 8000890:	d120      	bne.n	80008d4 <_puts_r+0x64>
 8000892:	686c      	ldr	r4, [r5, #4]
 8000894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000896:	07db      	lsls	r3, r3, #31
 8000898:	d405      	bmi.n	80008a6 <_puts_r+0x36>
 800089a:	89a3      	ldrh	r3, [r4, #12]
 800089c:	0598      	lsls	r0, r3, #22
 800089e:	d402      	bmi.n	80008a6 <_puts_r+0x36>
 80008a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008a2:	f000 fad3 	bl	8000e4c <__retarget_lock_acquire_recursive>
 80008a6:	89a3      	ldrh	r3, [r4, #12]
 80008a8:	0719      	lsls	r1, r3, #28
 80008aa:	d51d      	bpl.n	80008e8 <_puts_r+0x78>
 80008ac:	6923      	ldr	r3, [r4, #16]
 80008ae:	b1db      	cbz	r3, 80008e8 <_puts_r+0x78>
 80008b0:	3e01      	subs	r6, #1
 80008b2:	68a3      	ldr	r3, [r4, #8]
 80008b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008b8:	3b01      	subs	r3, #1
 80008ba:	60a3      	str	r3, [r4, #8]
 80008bc:	bb39      	cbnz	r1, 800090e <_puts_r+0x9e>
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da38      	bge.n	8000934 <_puts_r+0xc4>
 80008c2:	4622      	mov	r2, r4
 80008c4:	210a      	movs	r1, #10
 80008c6:	4628      	mov	r0, r5
 80008c8:	f000 f848 	bl	800095c <__swbuf_r>
 80008cc:	3001      	adds	r0, #1
 80008ce:	d011      	beq.n	80008f4 <_puts_r+0x84>
 80008d0:	250a      	movs	r5, #10
 80008d2:	e011      	b.n	80008f8 <_puts_r+0x88>
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <_puts_r+0xd4>)
 80008d6:	429c      	cmp	r4, r3
 80008d8:	d101      	bne.n	80008de <_puts_r+0x6e>
 80008da:	68ac      	ldr	r4, [r5, #8]
 80008dc:	e7da      	b.n	8000894 <_puts_r+0x24>
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <_puts_r+0xd8>)
 80008e0:	429c      	cmp	r4, r3
 80008e2:	bf08      	it	eq
 80008e4:	68ec      	ldreq	r4, [r5, #12]
 80008e6:	e7d5      	b.n	8000894 <_puts_r+0x24>
 80008e8:	4621      	mov	r1, r4
 80008ea:	4628      	mov	r0, r5
 80008ec:	f000 f888 	bl	8000a00 <__swsetup_r>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d0dd      	beq.n	80008b0 <_puts_r+0x40>
 80008f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80008f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008fa:	07da      	lsls	r2, r3, #31
 80008fc:	d405      	bmi.n	800090a <_puts_r+0x9a>
 80008fe:	89a3      	ldrh	r3, [r4, #12]
 8000900:	059b      	lsls	r3, r3, #22
 8000902:	d402      	bmi.n	800090a <_puts_r+0x9a>
 8000904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000906:	f000 faa2 	bl	8000e4e <__retarget_lock_release_recursive>
 800090a:	4628      	mov	r0, r5
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	2b00      	cmp	r3, #0
 8000910:	da04      	bge.n	800091c <_puts_r+0xac>
 8000912:	69a2      	ldr	r2, [r4, #24]
 8000914:	429a      	cmp	r2, r3
 8000916:	dc06      	bgt.n	8000926 <_puts_r+0xb6>
 8000918:	290a      	cmp	r1, #10
 800091a:	d004      	beq.n	8000926 <_puts_r+0xb6>
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	6022      	str	r2, [r4, #0]
 8000922:	7019      	strb	r1, [r3, #0]
 8000924:	e7c5      	b.n	80008b2 <_puts_r+0x42>
 8000926:	4622      	mov	r2, r4
 8000928:	4628      	mov	r0, r5
 800092a:	f000 f817 	bl	800095c <__swbuf_r>
 800092e:	3001      	adds	r0, #1
 8000930:	d1bf      	bne.n	80008b2 <_puts_r+0x42>
 8000932:	e7df      	b.n	80008f4 <_puts_r+0x84>
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	250a      	movs	r5, #10
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	6022      	str	r2, [r4, #0]
 800093c:	701d      	strb	r5, [r3, #0]
 800093e:	e7db      	b.n	80008f8 <_puts_r+0x88>
 8000940:	080012d8 	.word	0x080012d8
 8000944:	080012f8 	.word	0x080012f8
 8000948:	080012b8 	.word	0x080012b8

0800094c <puts>:
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <puts+0xc>)
 800094e:	4601      	mov	r1, r0
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	f7ff bf8d 	b.w	8000870 <_puts_r>
 8000956:	bf00      	nop
 8000958:	20000004 	.word	0x20000004

0800095c <__swbuf_r>:
 800095c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095e:	460e      	mov	r6, r1
 8000960:	4614      	mov	r4, r2
 8000962:	4605      	mov	r5, r0
 8000964:	b118      	cbz	r0, 800096e <__swbuf_r+0x12>
 8000966:	6983      	ldr	r3, [r0, #24]
 8000968:	b90b      	cbnz	r3, 800096e <__swbuf_r+0x12>
 800096a:	f000 f9d1 	bl	8000d10 <__sinit>
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <__swbuf_r+0x98>)
 8000970:	429c      	cmp	r4, r3
 8000972:	d12b      	bne.n	80009cc <__swbuf_r+0x70>
 8000974:	686c      	ldr	r4, [r5, #4]
 8000976:	69a3      	ldr	r3, [r4, #24]
 8000978:	60a3      	str	r3, [r4, #8]
 800097a:	89a3      	ldrh	r3, [r4, #12]
 800097c:	071a      	lsls	r2, r3, #28
 800097e:	d52f      	bpl.n	80009e0 <__swbuf_r+0x84>
 8000980:	6923      	ldr	r3, [r4, #16]
 8000982:	b36b      	cbz	r3, 80009e0 <__swbuf_r+0x84>
 8000984:	6923      	ldr	r3, [r4, #16]
 8000986:	6820      	ldr	r0, [r4, #0]
 8000988:	1ac0      	subs	r0, r0, r3
 800098a:	6963      	ldr	r3, [r4, #20]
 800098c:	b2f6      	uxtb	r6, r6
 800098e:	4283      	cmp	r3, r0
 8000990:	4637      	mov	r7, r6
 8000992:	dc04      	bgt.n	800099e <__swbuf_r+0x42>
 8000994:	4621      	mov	r1, r4
 8000996:	4628      	mov	r0, r5
 8000998:	f000 f926 	bl	8000be8 <_fflush_r>
 800099c:	bb30      	cbnz	r0, 80009ec <__swbuf_r+0x90>
 800099e:	68a3      	ldr	r3, [r4, #8]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	60a3      	str	r3, [r4, #8]
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	6022      	str	r2, [r4, #0]
 80009aa:	701e      	strb	r6, [r3, #0]
 80009ac:	6963      	ldr	r3, [r4, #20]
 80009ae:	3001      	adds	r0, #1
 80009b0:	4283      	cmp	r3, r0
 80009b2:	d004      	beq.n	80009be <__swbuf_r+0x62>
 80009b4:	89a3      	ldrh	r3, [r4, #12]
 80009b6:	07db      	lsls	r3, r3, #31
 80009b8:	d506      	bpl.n	80009c8 <__swbuf_r+0x6c>
 80009ba:	2e0a      	cmp	r6, #10
 80009bc:	d104      	bne.n	80009c8 <__swbuf_r+0x6c>
 80009be:	4621      	mov	r1, r4
 80009c0:	4628      	mov	r0, r5
 80009c2:	f000 f911 	bl	8000be8 <_fflush_r>
 80009c6:	b988      	cbnz	r0, 80009ec <__swbuf_r+0x90>
 80009c8:	4638      	mov	r0, r7
 80009ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <__swbuf_r+0x9c>)
 80009ce:	429c      	cmp	r4, r3
 80009d0:	d101      	bne.n	80009d6 <__swbuf_r+0x7a>
 80009d2:	68ac      	ldr	r4, [r5, #8]
 80009d4:	e7cf      	b.n	8000976 <__swbuf_r+0x1a>
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <__swbuf_r+0xa0>)
 80009d8:	429c      	cmp	r4, r3
 80009da:	bf08      	it	eq
 80009dc:	68ec      	ldreq	r4, [r5, #12]
 80009de:	e7ca      	b.n	8000976 <__swbuf_r+0x1a>
 80009e0:	4621      	mov	r1, r4
 80009e2:	4628      	mov	r0, r5
 80009e4:	f000 f80c 	bl	8000a00 <__swsetup_r>
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d0cb      	beq.n	8000984 <__swbuf_r+0x28>
 80009ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80009f0:	e7ea      	b.n	80009c8 <__swbuf_r+0x6c>
 80009f2:	bf00      	nop
 80009f4:	080012d8 	.word	0x080012d8
 80009f8:	080012f8 	.word	0x080012f8
 80009fc:	080012b8 	.word	0x080012b8

08000a00 <__swsetup_r>:
 8000a00:	4b32      	ldr	r3, [pc, #200]	; (8000acc <__swsetup_r+0xcc>)
 8000a02:	b570      	push	{r4, r5, r6, lr}
 8000a04:	681d      	ldr	r5, [r3, #0]
 8000a06:	4606      	mov	r6, r0
 8000a08:	460c      	mov	r4, r1
 8000a0a:	b125      	cbz	r5, 8000a16 <__swsetup_r+0x16>
 8000a0c:	69ab      	ldr	r3, [r5, #24]
 8000a0e:	b913      	cbnz	r3, 8000a16 <__swsetup_r+0x16>
 8000a10:	4628      	mov	r0, r5
 8000a12:	f000 f97d 	bl	8000d10 <__sinit>
 8000a16:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <__swsetup_r+0xd0>)
 8000a18:	429c      	cmp	r4, r3
 8000a1a:	d10f      	bne.n	8000a3c <__swsetup_r+0x3c>
 8000a1c:	686c      	ldr	r4, [r5, #4]
 8000a1e:	89a3      	ldrh	r3, [r4, #12]
 8000a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a24:	0719      	lsls	r1, r3, #28
 8000a26:	d42c      	bmi.n	8000a82 <__swsetup_r+0x82>
 8000a28:	06dd      	lsls	r5, r3, #27
 8000a2a:	d411      	bmi.n	8000a50 <__swsetup_r+0x50>
 8000a2c:	2309      	movs	r3, #9
 8000a2e:	6033      	str	r3, [r6, #0]
 8000a30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a34:	81a3      	strh	r3, [r4, #12]
 8000a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a3a:	e03e      	b.n	8000aba <__swsetup_r+0xba>
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <__swsetup_r+0xd4>)
 8000a3e:	429c      	cmp	r4, r3
 8000a40:	d101      	bne.n	8000a46 <__swsetup_r+0x46>
 8000a42:	68ac      	ldr	r4, [r5, #8]
 8000a44:	e7eb      	b.n	8000a1e <__swsetup_r+0x1e>
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <__swsetup_r+0xd8>)
 8000a48:	429c      	cmp	r4, r3
 8000a4a:	bf08      	it	eq
 8000a4c:	68ec      	ldreq	r4, [r5, #12]
 8000a4e:	e7e6      	b.n	8000a1e <__swsetup_r+0x1e>
 8000a50:	0758      	lsls	r0, r3, #29
 8000a52:	d512      	bpl.n	8000a7a <__swsetup_r+0x7a>
 8000a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a56:	b141      	cbz	r1, 8000a6a <__swsetup_r+0x6a>
 8000a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	d002      	beq.n	8000a66 <__swsetup_r+0x66>
 8000a60:	4630      	mov	r0, r6
 8000a62:	f000 fa59 	bl	8000f18 <_free_r>
 8000a66:	2300      	movs	r3, #0
 8000a68:	6363      	str	r3, [r4, #52]	; 0x34
 8000a6a:	89a3      	ldrh	r3, [r4, #12]
 8000a6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a70:	81a3      	strh	r3, [r4, #12]
 8000a72:	2300      	movs	r3, #0
 8000a74:	6063      	str	r3, [r4, #4]
 8000a76:	6923      	ldr	r3, [r4, #16]
 8000a78:	6023      	str	r3, [r4, #0]
 8000a7a:	89a3      	ldrh	r3, [r4, #12]
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	81a3      	strh	r3, [r4, #12]
 8000a82:	6923      	ldr	r3, [r4, #16]
 8000a84:	b94b      	cbnz	r3, 8000a9a <__swsetup_r+0x9a>
 8000a86:	89a3      	ldrh	r3, [r4, #12]
 8000a88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a90:	d003      	beq.n	8000a9a <__swsetup_r+0x9a>
 8000a92:	4621      	mov	r1, r4
 8000a94:	4630      	mov	r0, r6
 8000a96:	f000 f9ff 	bl	8000e98 <__smakebuf_r>
 8000a9a:	89a0      	ldrh	r0, [r4, #12]
 8000a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000aa0:	f010 0301 	ands.w	r3, r0, #1
 8000aa4:	d00a      	beq.n	8000abc <__swsetup_r+0xbc>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60a3      	str	r3, [r4, #8]
 8000aaa:	6963      	ldr	r3, [r4, #20]
 8000aac:	425b      	negs	r3, r3
 8000aae:	61a3      	str	r3, [r4, #24]
 8000ab0:	6923      	ldr	r3, [r4, #16]
 8000ab2:	b943      	cbnz	r3, 8000ac6 <__swsetup_r+0xc6>
 8000ab4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000ab8:	d1ba      	bne.n	8000a30 <__swsetup_r+0x30>
 8000aba:	bd70      	pop	{r4, r5, r6, pc}
 8000abc:	0781      	lsls	r1, r0, #30
 8000abe:	bf58      	it	pl
 8000ac0:	6963      	ldrpl	r3, [r4, #20]
 8000ac2:	60a3      	str	r3, [r4, #8]
 8000ac4:	e7f4      	b.n	8000ab0 <__swsetup_r+0xb0>
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	e7f7      	b.n	8000aba <__swsetup_r+0xba>
 8000aca:	bf00      	nop
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	080012d8 	.word	0x080012d8
 8000ad4:	080012f8 	.word	0x080012f8
 8000ad8:	080012b8 	.word	0x080012b8

08000adc <__sflush_r>:
 8000adc:	898a      	ldrh	r2, [r1, #12]
 8000ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae2:	4605      	mov	r5, r0
 8000ae4:	0710      	lsls	r0, r2, #28
 8000ae6:	460c      	mov	r4, r1
 8000ae8:	d458      	bmi.n	8000b9c <__sflush_r+0xc0>
 8000aea:	684b      	ldr	r3, [r1, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	dc05      	bgt.n	8000afc <__sflush_r+0x20>
 8000af0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	dc02      	bgt.n	8000afc <__sflush_r+0x20>
 8000af6:	2000      	movs	r0, #0
 8000af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d0f9      	beq.n	8000af6 <__sflush_r+0x1a>
 8000b02:	2300      	movs	r3, #0
 8000b04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b08:	682f      	ldr	r7, [r5, #0]
 8000b0a:	602b      	str	r3, [r5, #0]
 8000b0c:	d032      	beq.n	8000b74 <__sflush_r+0x98>
 8000b0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b10:	89a3      	ldrh	r3, [r4, #12]
 8000b12:	075a      	lsls	r2, r3, #29
 8000b14:	d505      	bpl.n	8000b22 <__sflush_r+0x46>
 8000b16:	6863      	ldr	r3, [r4, #4]
 8000b18:	1ac0      	subs	r0, r0, r3
 8000b1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b1c:	b10b      	cbz	r3, 8000b22 <__sflush_r+0x46>
 8000b1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b20:	1ac0      	subs	r0, r0, r3
 8000b22:	2300      	movs	r3, #0
 8000b24:	4602      	mov	r2, r0
 8000b26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b28:	6a21      	ldr	r1, [r4, #32]
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	47b0      	blx	r6
 8000b2e:	1c43      	adds	r3, r0, #1
 8000b30:	89a3      	ldrh	r3, [r4, #12]
 8000b32:	d106      	bne.n	8000b42 <__sflush_r+0x66>
 8000b34:	6829      	ldr	r1, [r5, #0]
 8000b36:	291d      	cmp	r1, #29
 8000b38:	d82c      	bhi.n	8000b94 <__sflush_r+0xb8>
 8000b3a:	4a2a      	ldr	r2, [pc, #168]	; (8000be4 <__sflush_r+0x108>)
 8000b3c:	40ca      	lsrs	r2, r1
 8000b3e:	07d6      	lsls	r6, r2, #31
 8000b40:	d528      	bpl.n	8000b94 <__sflush_r+0xb8>
 8000b42:	2200      	movs	r2, #0
 8000b44:	6062      	str	r2, [r4, #4]
 8000b46:	04d9      	lsls	r1, r3, #19
 8000b48:	6922      	ldr	r2, [r4, #16]
 8000b4a:	6022      	str	r2, [r4, #0]
 8000b4c:	d504      	bpl.n	8000b58 <__sflush_r+0x7c>
 8000b4e:	1c42      	adds	r2, r0, #1
 8000b50:	d101      	bne.n	8000b56 <__sflush_r+0x7a>
 8000b52:	682b      	ldr	r3, [r5, #0]
 8000b54:	b903      	cbnz	r3, 8000b58 <__sflush_r+0x7c>
 8000b56:	6560      	str	r0, [r4, #84]	; 0x54
 8000b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b5a:	602f      	str	r7, [r5, #0]
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d0ca      	beq.n	8000af6 <__sflush_r+0x1a>
 8000b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d002      	beq.n	8000b6e <__sflush_r+0x92>
 8000b68:	4628      	mov	r0, r5
 8000b6a:	f000 f9d5 	bl	8000f18 <_free_r>
 8000b6e:	2000      	movs	r0, #0
 8000b70:	6360      	str	r0, [r4, #52]	; 0x34
 8000b72:	e7c1      	b.n	8000af8 <__sflush_r+0x1c>
 8000b74:	6a21      	ldr	r1, [r4, #32]
 8000b76:	2301      	movs	r3, #1
 8000b78:	4628      	mov	r0, r5
 8000b7a:	47b0      	blx	r6
 8000b7c:	1c41      	adds	r1, r0, #1
 8000b7e:	d1c7      	bne.n	8000b10 <__sflush_r+0x34>
 8000b80:	682b      	ldr	r3, [r5, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0c4      	beq.n	8000b10 <__sflush_r+0x34>
 8000b86:	2b1d      	cmp	r3, #29
 8000b88:	d001      	beq.n	8000b8e <__sflush_r+0xb2>
 8000b8a:	2b16      	cmp	r3, #22
 8000b8c:	d101      	bne.n	8000b92 <__sflush_r+0xb6>
 8000b8e:	602f      	str	r7, [r5, #0]
 8000b90:	e7b1      	b.n	8000af6 <__sflush_r+0x1a>
 8000b92:	89a3      	ldrh	r3, [r4, #12]
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	81a3      	strh	r3, [r4, #12]
 8000b9a:	e7ad      	b.n	8000af8 <__sflush_r+0x1c>
 8000b9c:	690f      	ldr	r7, [r1, #16]
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d0a9      	beq.n	8000af6 <__sflush_r+0x1a>
 8000ba2:	0793      	lsls	r3, r2, #30
 8000ba4:	680e      	ldr	r6, [r1, #0]
 8000ba6:	bf08      	it	eq
 8000ba8:	694b      	ldreq	r3, [r1, #20]
 8000baa:	600f      	str	r7, [r1, #0]
 8000bac:	bf18      	it	ne
 8000bae:	2300      	movne	r3, #0
 8000bb0:	eba6 0807 	sub.w	r8, r6, r7
 8000bb4:	608b      	str	r3, [r1, #8]
 8000bb6:	f1b8 0f00 	cmp.w	r8, #0
 8000bba:	dd9c      	ble.n	8000af6 <__sflush_r+0x1a>
 8000bbc:	6a21      	ldr	r1, [r4, #32]
 8000bbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000bc0:	4643      	mov	r3, r8
 8000bc2:	463a      	mov	r2, r7
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	47b0      	blx	r6
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	dc06      	bgt.n	8000bda <__sflush_r+0xfe>
 8000bcc:	89a3      	ldrh	r3, [r4, #12]
 8000bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd2:	81a3      	strh	r3, [r4, #12]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd8:	e78e      	b.n	8000af8 <__sflush_r+0x1c>
 8000bda:	4407      	add	r7, r0
 8000bdc:	eba8 0800 	sub.w	r8, r8, r0
 8000be0:	e7e9      	b.n	8000bb6 <__sflush_r+0xda>
 8000be2:	bf00      	nop
 8000be4:	20400001 	.word	0x20400001

08000be8 <_fflush_r>:
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	690b      	ldr	r3, [r1, #16]
 8000bec:	4605      	mov	r5, r0
 8000bee:	460c      	mov	r4, r1
 8000bf0:	b913      	cbnz	r3, 8000bf8 <_fflush_r+0x10>
 8000bf2:	2500      	movs	r5, #0
 8000bf4:	4628      	mov	r0, r5
 8000bf6:	bd38      	pop	{r3, r4, r5, pc}
 8000bf8:	b118      	cbz	r0, 8000c02 <_fflush_r+0x1a>
 8000bfa:	6983      	ldr	r3, [r0, #24]
 8000bfc:	b90b      	cbnz	r3, 8000c02 <_fflush_r+0x1a>
 8000bfe:	f000 f887 	bl	8000d10 <__sinit>
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <_fflush_r+0x6c>)
 8000c04:	429c      	cmp	r4, r3
 8000c06:	d11b      	bne.n	8000c40 <_fflush_r+0x58>
 8000c08:	686c      	ldr	r4, [r5, #4]
 8000c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0ef      	beq.n	8000bf2 <_fflush_r+0xa>
 8000c12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000c14:	07d0      	lsls	r0, r2, #31
 8000c16:	d404      	bmi.n	8000c22 <_fflush_r+0x3a>
 8000c18:	0599      	lsls	r1, r3, #22
 8000c1a:	d402      	bmi.n	8000c22 <_fflush_r+0x3a>
 8000c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c1e:	f000 f915 	bl	8000e4c <__retarget_lock_acquire_recursive>
 8000c22:	4628      	mov	r0, r5
 8000c24:	4621      	mov	r1, r4
 8000c26:	f7ff ff59 	bl	8000adc <__sflush_r>
 8000c2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c2c:	07da      	lsls	r2, r3, #31
 8000c2e:	4605      	mov	r5, r0
 8000c30:	d4e0      	bmi.n	8000bf4 <_fflush_r+0xc>
 8000c32:	89a3      	ldrh	r3, [r4, #12]
 8000c34:	059b      	lsls	r3, r3, #22
 8000c36:	d4dd      	bmi.n	8000bf4 <_fflush_r+0xc>
 8000c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c3a:	f000 f908 	bl	8000e4e <__retarget_lock_release_recursive>
 8000c3e:	e7d9      	b.n	8000bf4 <_fflush_r+0xc>
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <_fflush_r+0x70>)
 8000c42:	429c      	cmp	r4, r3
 8000c44:	d101      	bne.n	8000c4a <_fflush_r+0x62>
 8000c46:	68ac      	ldr	r4, [r5, #8]
 8000c48:	e7df      	b.n	8000c0a <_fflush_r+0x22>
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <_fflush_r+0x74>)
 8000c4c:	429c      	cmp	r4, r3
 8000c4e:	bf08      	it	eq
 8000c50:	68ec      	ldreq	r4, [r5, #12]
 8000c52:	e7da      	b.n	8000c0a <_fflush_r+0x22>
 8000c54:	080012d8 	.word	0x080012d8
 8000c58:	080012f8 	.word	0x080012f8
 8000c5c:	080012b8 	.word	0x080012b8

08000c60 <std>:
 8000c60:	2300      	movs	r3, #0
 8000c62:	b510      	push	{r4, lr}
 8000c64:	4604      	mov	r4, r0
 8000c66:	e9c0 3300 	strd	r3, r3, [r0]
 8000c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c6e:	6083      	str	r3, [r0, #8]
 8000c70:	8181      	strh	r1, [r0, #12]
 8000c72:	6643      	str	r3, [r0, #100]	; 0x64
 8000c74:	81c2      	strh	r2, [r0, #14]
 8000c76:	6183      	str	r3, [r0, #24]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	305c      	adds	r0, #92	; 0x5c
 8000c7e:	f7ff fdef 	bl	8000860 <memset>
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <std+0x38>)
 8000c84:	6263      	str	r3, [r4, #36]	; 0x24
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <std+0x3c>)
 8000c88:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <std+0x40>)
 8000c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <std+0x44>)
 8000c90:	6224      	str	r4, [r4, #32]
 8000c92:	6323      	str	r3, [r4, #48]	; 0x30
 8000c94:	bd10      	pop	{r4, pc}
 8000c96:	bf00      	nop
 8000c98:	08001089 	.word	0x08001089
 8000c9c:	080010ab 	.word	0x080010ab
 8000ca0:	080010e3 	.word	0x080010e3
 8000ca4:	08001107 	.word	0x08001107

08000ca8 <_cleanup_r>:
 8000ca8:	4901      	ldr	r1, [pc, #4]	; (8000cb0 <_cleanup_r+0x8>)
 8000caa:	f000 b8af 	b.w	8000e0c <_fwalk_reent>
 8000cae:	bf00      	nop
 8000cb0:	08000be9 	.word	0x08000be9

08000cb4 <__sfmoreglue>:
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	1e4a      	subs	r2, r1, #1
 8000cb8:	2568      	movs	r5, #104	; 0x68
 8000cba:	4355      	muls	r5, r2
 8000cbc:	460e      	mov	r6, r1
 8000cbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000cc2:	f000 f977 	bl	8000fb4 <_malloc_r>
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	b140      	cbz	r0, 8000cdc <__sfmoreglue+0x28>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e9c0 1600 	strd	r1, r6, [r0]
 8000cd0:	300c      	adds	r0, #12
 8000cd2:	60a0      	str	r0, [r4, #8]
 8000cd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000cd8:	f7ff fdc2 	bl	8000860 <memset>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	bd70      	pop	{r4, r5, r6, pc}

08000ce0 <__sfp_lock_acquire>:
 8000ce0:	4801      	ldr	r0, [pc, #4]	; (8000ce8 <__sfp_lock_acquire+0x8>)
 8000ce2:	f000 b8b3 	b.w	8000e4c <__retarget_lock_acquire_recursive>
 8000ce6:	bf00      	nop
 8000ce8:	200000ec 	.word	0x200000ec

08000cec <__sfp_lock_release>:
 8000cec:	4801      	ldr	r0, [pc, #4]	; (8000cf4 <__sfp_lock_release+0x8>)
 8000cee:	f000 b8ae 	b.w	8000e4e <__retarget_lock_release_recursive>
 8000cf2:	bf00      	nop
 8000cf4:	200000ec 	.word	0x200000ec

08000cf8 <__sinit_lock_acquire>:
 8000cf8:	4801      	ldr	r0, [pc, #4]	; (8000d00 <__sinit_lock_acquire+0x8>)
 8000cfa:	f000 b8a7 	b.w	8000e4c <__retarget_lock_acquire_recursive>
 8000cfe:	bf00      	nop
 8000d00:	200000e7 	.word	0x200000e7

08000d04 <__sinit_lock_release>:
 8000d04:	4801      	ldr	r0, [pc, #4]	; (8000d0c <__sinit_lock_release+0x8>)
 8000d06:	f000 b8a2 	b.w	8000e4e <__retarget_lock_release_recursive>
 8000d0a:	bf00      	nop
 8000d0c:	200000e7 	.word	0x200000e7

08000d10 <__sinit>:
 8000d10:	b510      	push	{r4, lr}
 8000d12:	4604      	mov	r4, r0
 8000d14:	f7ff fff0 	bl	8000cf8 <__sinit_lock_acquire>
 8000d18:	69a3      	ldr	r3, [r4, #24]
 8000d1a:	b11b      	cbz	r3, 8000d24 <__sinit+0x14>
 8000d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d20:	f7ff bff0 	b.w	8000d04 <__sinit_lock_release>
 8000d24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000d28:	6523      	str	r3, [r4, #80]	; 0x50
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <__sinit+0x68>)
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <__sinit+0x6c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	62a2      	str	r2, [r4, #40]	; 0x28
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	bf04      	itt	eq
 8000d36:	2301      	moveq	r3, #1
 8000d38:	61a3      	streq	r3, [r4, #24]
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f000 f820 	bl	8000d80 <__sfp>
 8000d40:	6060      	str	r0, [r4, #4]
 8000d42:	4620      	mov	r0, r4
 8000d44:	f000 f81c 	bl	8000d80 <__sfp>
 8000d48:	60a0      	str	r0, [r4, #8]
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f000 f818 	bl	8000d80 <__sfp>
 8000d50:	2200      	movs	r2, #0
 8000d52:	60e0      	str	r0, [r4, #12]
 8000d54:	2104      	movs	r1, #4
 8000d56:	6860      	ldr	r0, [r4, #4]
 8000d58:	f7ff ff82 	bl	8000c60 <std>
 8000d5c:	68a0      	ldr	r0, [r4, #8]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2109      	movs	r1, #9
 8000d62:	f7ff ff7d 	bl	8000c60 <std>
 8000d66:	68e0      	ldr	r0, [r4, #12]
 8000d68:	2202      	movs	r2, #2
 8000d6a:	2112      	movs	r1, #18
 8000d6c:	f7ff ff78 	bl	8000c60 <std>
 8000d70:	2301      	movs	r3, #1
 8000d72:	61a3      	str	r3, [r4, #24]
 8000d74:	e7d2      	b.n	8000d1c <__sinit+0xc>
 8000d76:	bf00      	nop
 8000d78:	080012b4 	.word	0x080012b4
 8000d7c:	08000ca9 	.word	0x08000ca9

08000d80 <__sfp>:
 8000d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d82:	4607      	mov	r7, r0
 8000d84:	f7ff ffac 	bl	8000ce0 <__sfp_lock_acquire>
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <__sfp+0x84>)
 8000d8a:	681e      	ldr	r6, [r3, #0]
 8000d8c:	69b3      	ldr	r3, [r6, #24]
 8000d8e:	b913      	cbnz	r3, 8000d96 <__sfp+0x16>
 8000d90:	4630      	mov	r0, r6
 8000d92:	f7ff ffbd 	bl	8000d10 <__sinit>
 8000d96:	3648      	adds	r6, #72	; 0x48
 8000d98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	d503      	bpl.n	8000da8 <__sfp+0x28>
 8000da0:	6833      	ldr	r3, [r6, #0]
 8000da2:	b30b      	cbz	r3, 8000de8 <__sfp+0x68>
 8000da4:	6836      	ldr	r6, [r6, #0]
 8000da6:	e7f7      	b.n	8000d98 <__sfp+0x18>
 8000da8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000dac:	b9d5      	cbnz	r5, 8000de4 <__sfp+0x64>
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <__sfp+0x88>)
 8000db0:	60e3      	str	r3, [r4, #12]
 8000db2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000db6:	6665      	str	r5, [r4, #100]	; 0x64
 8000db8:	f000 f847 	bl	8000e4a <__retarget_lock_init_recursive>
 8000dbc:	f7ff ff96 	bl	8000cec <__sfp_lock_release>
 8000dc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000dc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000dc8:	6025      	str	r5, [r4, #0]
 8000dca:	61a5      	str	r5, [r4, #24]
 8000dcc:	2208      	movs	r2, #8
 8000dce:	4629      	mov	r1, r5
 8000dd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000dd4:	f7ff fd44 	bl	8000860 <memset>
 8000dd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ddc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000de0:	4620      	mov	r0, r4
 8000de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000de4:	3468      	adds	r4, #104	; 0x68
 8000de6:	e7d9      	b.n	8000d9c <__sfp+0x1c>
 8000de8:	2104      	movs	r1, #4
 8000dea:	4638      	mov	r0, r7
 8000dec:	f7ff ff62 	bl	8000cb4 <__sfmoreglue>
 8000df0:	4604      	mov	r4, r0
 8000df2:	6030      	str	r0, [r6, #0]
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d1d5      	bne.n	8000da4 <__sfp+0x24>
 8000df8:	f7ff ff78 	bl	8000cec <__sfp_lock_release>
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	e7ee      	b.n	8000de0 <__sfp+0x60>
 8000e02:	bf00      	nop
 8000e04:	080012b4 	.word	0x080012b4
 8000e08:	ffff0001 	.word	0xffff0001

08000e0c <_fwalk_reent>:
 8000e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e10:	4606      	mov	r6, r0
 8000e12:	4688      	mov	r8, r1
 8000e14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e1e:	f1b9 0901 	subs.w	r9, r9, #1
 8000e22:	d505      	bpl.n	8000e30 <_fwalk_reent+0x24>
 8000e24:	6824      	ldr	r4, [r4, #0]
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	d1f7      	bne.n	8000e1a <_fwalk_reent+0xe>
 8000e2a:	4638      	mov	r0, r7
 8000e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e30:	89ab      	ldrh	r3, [r5, #12]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d907      	bls.n	8000e46 <_fwalk_reent+0x3a>
 8000e36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	d003      	beq.n	8000e46 <_fwalk_reent+0x3a>
 8000e3e:	4629      	mov	r1, r5
 8000e40:	4630      	mov	r0, r6
 8000e42:	47c0      	blx	r8
 8000e44:	4307      	orrs	r7, r0
 8000e46:	3568      	adds	r5, #104	; 0x68
 8000e48:	e7e9      	b.n	8000e1e <_fwalk_reent+0x12>

08000e4a <__retarget_lock_init_recursive>:
 8000e4a:	4770      	bx	lr

08000e4c <__retarget_lock_acquire_recursive>:
 8000e4c:	4770      	bx	lr

08000e4e <__retarget_lock_release_recursive>:
 8000e4e:	4770      	bx	lr

08000e50 <__swhatbuf_r>:
 8000e50:	b570      	push	{r4, r5, r6, lr}
 8000e52:	460e      	mov	r6, r1
 8000e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	b096      	sub	sp, #88	; 0x58
 8000e5c:	4614      	mov	r4, r2
 8000e5e:	461d      	mov	r5, r3
 8000e60:	da07      	bge.n	8000e72 <__swhatbuf_r+0x22>
 8000e62:	2300      	movs	r3, #0
 8000e64:	602b      	str	r3, [r5, #0]
 8000e66:	89b3      	ldrh	r3, [r6, #12]
 8000e68:	061a      	lsls	r2, r3, #24
 8000e6a:	d410      	bmi.n	8000e8e <__swhatbuf_r+0x3e>
 8000e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e70:	e00e      	b.n	8000e90 <__swhatbuf_r+0x40>
 8000e72:	466a      	mov	r2, sp
 8000e74:	f000 f96e 	bl	8001154 <_fstat_r>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	dbf2      	blt.n	8000e62 <__swhatbuf_r+0x12>
 8000e7c:	9a01      	ldr	r2, [sp, #4]
 8000e7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e86:	425a      	negs	r2, r3
 8000e88:	415a      	adcs	r2, r3
 8000e8a:	602a      	str	r2, [r5, #0]
 8000e8c:	e7ee      	b.n	8000e6c <__swhatbuf_r+0x1c>
 8000e8e:	2340      	movs	r3, #64	; 0x40
 8000e90:	2000      	movs	r0, #0
 8000e92:	6023      	str	r3, [r4, #0]
 8000e94:	b016      	add	sp, #88	; 0x58
 8000e96:	bd70      	pop	{r4, r5, r6, pc}

08000e98 <__smakebuf_r>:
 8000e98:	898b      	ldrh	r3, [r1, #12]
 8000e9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e9c:	079d      	lsls	r5, r3, #30
 8000e9e:	4606      	mov	r6, r0
 8000ea0:	460c      	mov	r4, r1
 8000ea2:	d507      	bpl.n	8000eb4 <__smakebuf_r+0x1c>
 8000ea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ea8:	6023      	str	r3, [r4, #0]
 8000eaa:	6123      	str	r3, [r4, #16]
 8000eac:	2301      	movs	r3, #1
 8000eae:	6163      	str	r3, [r4, #20]
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	ab01      	add	r3, sp, #4
 8000eb6:	466a      	mov	r2, sp
 8000eb8:	f7ff ffca 	bl	8000e50 <__swhatbuf_r>
 8000ebc:	9900      	ldr	r1, [sp, #0]
 8000ebe:	4605      	mov	r5, r0
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	f000 f877 	bl	8000fb4 <_malloc_r>
 8000ec6:	b948      	cbnz	r0, 8000edc <__smakebuf_r+0x44>
 8000ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ecc:	059a      	lsls	r2, r3, #22
 8000ece:	d4ef      	bmi.n	8000eb0 <__smakebuf_r+0x18>
 8000ed0:	f023 0303 	bic.w	r3, r3, #3
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	81a3      	strh	r3, [r4, #12]
 8000eda:	e7e3      	b.n	8000ea4 <__smakebuf_r+0xc>
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <__smakebuf_r+0x7c>)
 8000ede:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ee0:	89a3      	ldrh	r3, [r4, #12]
 8000ee2:	6020      	str	r0, [r4, #0]
 8000ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee8:	81a3      	strh	r3, [r4, #12]
 8000eea:	9b00      	ldr	r3, [sp, #0]
 8000eec:	6163      	str	r3, [r4, #20]
 8000eee:	9b01      	ldr	r3, [sp, #4]
 8000ef0:	6120      	str	r0, [r4, #16]
 8000ef2:	b15b      	cbz	r3, 8000f0c <__smakebuf_r+0x74>
 8000ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ef8:	4630      	mov	r0, r6
 8000efa:	f000 f93d 	bl	8001178 <_isatty_r>
 8000efe:	b128      	cbz	r0, 8000f0c <__smakebuf_r+0x74>
 8000f00:	89a3      	ldrh	r3, [r4, #12]
 8000f02:	f023 0303 	bic.w	r3, r3, #3
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	81a3      	strh	r3, [r4, #12]
 8000f0c:	89a0      	ldrh	r0, [r4, #12]
 8000f0e:	4305      	orrs	r5, r0
 8000f10:	81a5      	strh	r5, [r4, #12]
 8000f12:	e7cd      	b.n	8000eb0 <__smakebuf_r+0x18>
 8000f14:	08000ca9 	.word	0x08000ca9

08000f18 <_free_r>:
 8000f18:	b538      	push	{r3, r4, r5, lr}
 8000f1a:	4605      	mov	r5, r0
 8000f1c:	2900      	cmp	r1, #0
 8000f1e:	d045      	beq.n	8000fac <_free_r+0x94>
 8000f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f24:	1f0c      	subs	r4, r1, #4
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	bfb8      	it	lt
 8000f2a:	18e4      	addlt	r4, r4, r3
 8000f2c:	f000 f946 	bl	80011bc <__malloc_lock>
 8000f30:	4a1f      	ldr	r2, [pc, #124]	; (8000fb0 <_free_r+0x98>)
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	4610      	mov	r0, r2
 8000f36:	b933      	cbnz	r3, 8000f46 <_free_r+0x2e>
 8000f38:	6063      	str	r3, [r4, #4]
 8000f3a:	6014      	str	r4, [r2, #0]
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f42:	f000 b941 	b.w	80011c8 <__malloc_unlock>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d90b      	bls.n	8000f62 <_free_r+0x4a>
 8000f4a:	6821      	ldr	r1, [r4, #0]
 8000f4c:	1862      	adds	r2, r4, r1
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	bf04      	itt	eq
 8000f52:	681a      	ldreq	r2, [r3, #0]
 8000f54:	685b      	ldreq	r3, [r3, #4]
 8000f56:	6063      	str	r3, [r4, #4]
 8000f58:	bf04      	itt	eq
 8000f5a:	1852      	addeq	r2, r2, r1
 8000f5c:	6022      	streq	r2, [r4, #0]
 8000f5e:	6004      	str	r4, [r0, #0]
 8000f60:	e7ec      	b.n	8000f3c <_free_r+0x24>
 8000f62:	461a      	mov	r2, r3
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	b10b      	cbz	r3, 8000f6c <_free_r+0x54>
 8000f68:	42a3      	cmp	r3, r4
 8000f6a:	d9fa      	bls.n	8000f62 <_free_r+0x4a>
 8000f6c:	6811      	ldr	r1, [r2, #0]
 8000f6e:	1850      	adds	r0, r2, r1
 8000f70:	42a0      	cmp	r0, r4
 8000f72:	d10b      	bne.n	8000f8c <_free_r+0x74>
 8000f74:	6820      	ldr	r0, [r4, #0]
 8000f76:	4401      	add	r1, r0
 8000f78:	1850      	adds	r0, r2, r1
 8000f7a:	4283      	cmp	r3, r0
 8000f7c:	6011      	str	r1, [r2, #0]
 8000f7e:	d1dd      	bne.n	8000f3c <_free_r+0x24>
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	6053      	str	r3, [r2, #4]
 8000f86:	4401      	add	r1, r0
 8000f88:	6011      	str	r1, [r2, #0]
 8000f8a:	e7d7      	b.n	8000f3c <_free_r+0x24>
 8000f8c:	d902      	bls.n	8000f94 <_free_r+0x7c>
 8000f8e:	230c      	movs	r3, #12
 8000f90:	602b      	str	r3, [r5, #0]
 8000f92:	e7d3      	b.n	8000f3c <_free_r+0x24>
 8000f94:	6820      	ldr	r0, [r4, #0]
 8000f96:	1821      	adds	r1, r4, r0
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	bf04      	itt	eq
 8000f9c:	6819      	ldreq	r1, [r3, #0]
 8000f9e:	685b      	ldreq	r3, [r3, #4]
 8000fa0:	6063      	str	r3, [r4, #4]
 8000fa2:	bf04      	itt	eq
 8000fa4:	1809      	addeq	r1, r1, r0
 8000fa6:	6021      	streq	r1, [r4, #0]
 8000fa8:	6054      	str	r4, [r2, #4]
 8000faa:	e7c7      	b.n	8000f3c <_free_r+0x24>
 8000fac:	bd38      	pop	{r3, r4, r5, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000008c 	.word	0x2000008c

08000fb4 <_malloc_r>:
 8000fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb6:	1ccd      	adds	r5, r1, #3
 8000fb8:	f025 0503 	bic.w	r5, r5, #3
 8000fbc:	3508      	adds	r5, #8
 8000fbe:	2d0c      	cmp	r5, #12
 8000fc0:	bf38      	it	cc
 8000fc2:	250c      	movcc	r5, #12
 8000fc4:	2d00      	cmp	r5, #0
 8000fc6:	4606      	mov	r6, r0
 8000fc8:	db01      	blt.n	8000fce <_malloc_r+0x1a>
 8000fca:	42a9      	cmp	r1, r5
 8000fcc:	d903      	bls.n	8000fd6 <_malloc_r+0x22>
 8000fce:	230c      	movs	r3, #12
 8000fd0:	6033      	str	r3, [r6, #0]
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fd6:	f000 f8f1 	bl	80011bc <__malloc_lock>
 8000fda:	4921      	ldr	r1, [pc, #132]	; (8001060 <_malloc_r+0xac>)
 8000fdc:	680a      	ldr	r2, [r1, #0]
 8000fde:	4614      	mov	r4, r2
 8000fe0:	b99c      	cbnz	r4, 800100a <_malloc_r+0x56>
 8000fe2:	4f20      	ldr	r7, [pc, #128]	; (8001064 <_malloc_r+0xb0>)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b923      	cbnz	r3, 8000ff2 <_malloc_r+0x3e>
 8000fe8:	4621      	mov	r1, r4
 8000fea:	4630      	mov	r0, r6
 8000fec:	f000 f83c 	bl	8001068 <_sbrk_r>
 8000ff0:	6038      	str	r0, [r7, #0]
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	f000 f837 	bl	8001068 <_sbrk_r>
 8000ffa:	1c43      	adds	r3, r0, #1
 8000ffc:	d123      	bne.n	8001046 <_malloc_r+0x92>
 8000ffe:	230c      	movs	r3, #12
 8001000:	6033      	str	r3, [r6, #0]
 8001002:	4630      	mov	r0, r6
 8001004:	f000 f8e0 	bl	80011c8 <__malloc_unlock>
 8001008:	e7e3      	b.n	8000fd2 <_malloc_r+0x1e>
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	1b5b      	subs	r3, r3, r5
 800100e:	d417      	bmi.n	8001040 <_malloc_r+0x8c>
 8001010:	2b0b      	cmp	r3, #11
 8001012:	d903      	bls.n	800101c <_malloc_r+0x68>
 8001014:	6023      	str	r3, [r4, #0]
 8001016:	441c      	add	r4, r3
 8001018:	6025      	str	r5, [r4, #0]
 800101a:	e004      	b.n	8001026 <_malloc_r+0x72>
 800101c:	6863      	ldr	r3, [r4, #4]
 800101e:	42a2      	cmp	r2, r4
 8001020:	bf0c      	ite	eq
 8001022:	600b      	streq	r3, [r1, #0]
 8001024:	6053      	strne	r3, [r2, #4]
 8001026:	4630      	mov	r0, r6
 8001028:	f000 f8ce 	bl	80011c8 <__malloc_unlock>
 800102c:	f104 000b 	add.w	r0, r4, #11
 8001030:	1d23      	adds	r3, r4, #4
 8001032:	f020 0007 	bic.w	r0, r0, #7
 8001036:	1ac2      	subs	r2, r0, r3
 8001038:	d0cc      	beq.n	8000fd4 <_malloc_r+0x20>
 800103a:	1a1b      	subs	r3, r3, r0
 800103c:	50a3      	str	r3, [r4, r2]
 800103e:	e7c9      	b.n	8000fd4 <_malloc_r+0x20>
 8001040:	4622      	mov	r2, r4
 8001042:	6864      	ldr	r4, [r4, #4]
 8001044:	e7cc      	b.n	8000fe0 <_malloc_r+0x2c>
 8001046:	1cc4      	adds	r4, r0, #3
 8001048:	f024 0403 	bic.w	r4, r4, #3
 800104c:	42a0      	cmp	r0, r4
 800104e:	d0e3      	beq.n	8001018 <_malloc_r+0x64>
 8001050:	1a21      	subs	r1, r4, r0
 8001052:	4630      	mov	r0, r6
 8001054:	f000 f808 	bl	8001068 <_sbrk_r>
 8001058:	3001      	adds	r0, #1
 800105a:	d1dd      	bne.n	8001018 <_malloc_r+0x64>
 800105c:	e7cf      	b.n	8000ffe <_malloc_r+0x4a>
 800105e:	bf00      	nop
 8001060:	2000008c 	.word	0x2000008c
 8001064:	20000090 	.word	0x20000090

08001068 <_sbrk_r>:
 8001068:	b538      	push	{r3, r4, r5, lr}
 800106a:	4d06      	ldr	r5, [pc, #24]	; (8001084 <_sbrk_r+0x1c>)
 800106c:	2300      	movs	r3, #0
 800106e:	4604      	mov	r4, r0
 8001070:	4608      	mov	r0, r1
 8001072:	602b      	str	r3, [r5, #0]
 8001074:	f7ff fb6a 	bl	800074c <_sbrk>
 8001078:	1c43      	adds	r3, r0, #1
 800107a:	d102      	bne.n	8001082 <_sbrk_r+0x1a>
 800107c:	682b      	ldr	r3, [r5, #0]
 800107e:	b103      	cbz	r3, 8001082 <_sbrk_r+0x1a>
 8001080:	6023      	str	r3, [r4, #0]
 8001082:	bd38      	pop	{r3, r4, r5, pc}
 8001084:	200000f0 	.word	0x200000f0

08001088 <__sread>:
 8001088:	b510      	push	{r4, lr}
 800108a:	460c      	mov	r4, r1
 800108c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001090:	f000 f8a0 	bl	80011d4 <_read_r>
 8001094:	2800      	cmp	r0, #0
 8001096:	bfab      	itete	ge
 8001098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800109a:	89a3      	ldrhlt	r3, [r4, #12]
 800109c:	181b      	addge	r3, r3, r0
 800109e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80010a2:	bfac      	ite	ge
 80010a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80010a6:	81a3      	strhlt	r3, [r4, #12]
 80010a8:	bd10      	pop	{r4, pc}

080010aa <__swrite>:
 80010aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010ae:	461f      	mov	r7, r3
 80010b0:	898b      	ldrh	r3, [r1, #12]
 80010b2:	05db      	lsls	r3, r3, #23
 80010b4:	4605      	mov	r5, r0
 80010b6:	460c      	mov	r4, r1
 80010b8:	4616      	mov	r6, r2
 80010ba:	d505      	bpl.n	80010c8 <__swrite+0x1e>
 80010bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010c0:	2302      	movs	r3, #2
 80010c2:	2200      	movs	r2, #0
 80010c4:	f000 f868 	bl	8001198 <_lseek_r>
 80010c8:	89a3      	ldrh	r3, [r4, #12]
 80010ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010d2:	81a3      	strh	r3, [r4, #12]
 80010d4:	4632      	mov	r2, r6
 80010d6:	463b      	mov	r3, r7
 80010d8:	4628      	mov	r0, r5
 80010da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010de:	f000 b817 	b.w	8001110 <_write_r>

080010e2 <__sseek>:
 80010e2:	b510      	push	{r4, lr}
 80010e4:	460c      	mov	r4, r1
 80010e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ea:	f000 f855 	bl	8001198 <_lseek_r>
 80010ee:	1c43      	adds	r3, r0, #1
 80010f0:	89a3      	ldrh	r3, [r4, #12]
 80010f2:	bf15      	itete	ne
 80010f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80010f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010fe:	81a3      	strheq	r3, [r4, #12]
 8001100:	bf18      	it	ne
 8001102:	81a3      	strhne	r3, [r4, #12]
 8001104:	bd10      	pop	{r4, pc}

08001106 <__sclose>:
 8001106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800110a:	f000 b813 	b.w	8001134 <_close_r>
	...

08001110 <_write_r>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4d07      	ldr	r5, [pc, #28]	; (8001130 <_write_r+0x20>)
 8001114:	4604      	mov	r4, r0
 8001116:	4608      	mov	r0, r1
 8001118:	4611      	mov	r1, r2
 800111a:	2200      	movs	r2, #0
 800111c:	602a      	str	r2, [r5, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	f7ff fac7 	bl	80006b2 <_write>
 8001124:	1c43      	adds	r3, r0, #1
 8001126:	d102      	bne.n	800112e <_write_r+0x1e>
 8001128:	682b      	ldr	r3, [r5, #0]
 800112a:	b103      	cbz	r3, 800112e <_write_r+0x1e>
 800112c:	6023      	str	r3, [r4, #0]
 800112e:	bd38      	pop	{r3, r4, r5, pc}
 8001130:	200000f0 	.word	0x200000f0

08001134 <_close_r>:
 8001134:	b538      	push	{r3, r4, r5, lr}
 8001136:	4d06      	ldr	r5, [pc, #24]	; (8001150 <_close_r+0x1c>)
 8001138:	2300      	movs	r3, #0
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	602b      	str	r3, [r5, #0]
 8001140:	f7ff fad3 	bl	80006ea <_close>
 8001144:	1c43      	adds	r3, r0, #1
 8001146:	d102      	bne.n	800114e <_close_r+0x1a>
 8001148:	682b      	ldr	r3, [r5, #0]
 800114a:	b103      	cbz	r3, 800114e <_close_r+0x1a>
 800114c:	6023      	str	r3, [r4, #0]
 800114e:	bd38      	pop	{r3, r4, r5, pc}
 8001150:	200000f0 	.word	0x200000f0

08001154 <_fstat_r>:
 8001154:	b538      	push	{r3, r4, r5, lr}
 8001156:	4d07      	ldr	r5, [pc, #28]	; (8001174 <_fstat_r+0x20>)
 8001158:	2300      	movs	r3, #0
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	602b      	str	r3, [r5, #0]
 8001162:	f7ff facd 	bl	8000700 <_fstat>
 8001166:	1c43      	adds	r3, r0, #1
 8001168:	d102      	bne.n	8001170 <_fstat_r+0x1c>
 800116a:	682b      	ldr	r3, [r5, #0]
 800116c:	b103      	cbz	r3, 8001170 <_fstat_r+0x1c>
 800116e:	6023      	str	r3, [r4, #0]
 8001170:	bd38      	pop	{r3, r4, r5, pc}
 8001172:	bf00      	nop
 8001174:	200000f0 	.word	0x200000f0

08001178 <_isatty_r>:
 8001178:	b538      	push	{r3, r4, r5, lr}
 800117a:	4d06      	ldr	r5, [pc, #24]	; (8001194 <_isatty_r+0x1c>)
 800117c:	2300      	movs	r3, #0
 800117e:	4604      	mov	r4, r0
 8001180:	4608      	mov	r0, r1
 8001182:	602b      	str	r3, [r5, #0]
 8001184:	f7ff facb 	bl	800071e <_isatty>
 8001188:	1c43      	adds	r3, r0, #1
 800118a:	d102      	bne.n	8001192 <_isatty_r+0x1a>
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	b103      	cbz	r3, 8001192 <_isatty_r+0x1a>
 8001190:	6023      	str	r3, [r4, #0]
 8001192:	bd38      	pop	{r3, r4, r5, pc}
 8001194:	200000f0 	.word	0x200000f0

08001198 <_lseek_r>:
 8001198:	b538      	push	{r3, r4, r5, lr}
 800119a:	4d07      	ldr	r5, [pc, #28]	; (80011b8 <_lseek_r+0x20>)
 800119c:	4604      	mov	r4, r0
 800119e:	4608      	mov	r0, r1
 80011a0:	4611      	mov	r1, r2
 80011a2:	2200      	movs	r2, #0
 80011a4:	602a      	str	r2, [r5, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	f7ff fac3 	bl	8000732 <_lseek>
 80011ac:	1c43      	adds	r3, r0, #1
 80011ae:	d102      	bne.n	80011b6 <_lseek_r+0x1e>
 80011b0:	682b      	ldr	r3, [r5, #0]
 80011b2:	b103      	cbz	r3, 80011b6 <_lseek_r+0x1e>
 80011b4:	6023      	str	r3, [r4, #0]
 80011b6:	bd38      	pop	{r3, r4, r5, pc}
 80011b8:	200000f0 	.word	0x200000f0

080011bc <__malloc_lock>:
 80011bc:	4801      	ldr	r0, [pc, #4]	; (80011c4 <__malloc_lock+0x8>)
 80011be:	f7ff be45 	b.w	8000e4c <__retarget_lock_acquire_recursive>
 80011c2:	bf00      	nop
 80011c4:	200000e8 	.word	0x200000e8

080011c8 <__malloc_unlock>:
 80011c8:	4801      	ldr	r0, [pc, #4]	; (80011d0 <__malloc_unlock+0x8>)
 80011ca:	f7ff be40 	b.w	8000e4e <__retarget_lock_release_recursive>
 80011ce:	bf00      	nop
 80011d0:	200000e8 	.word	0x200000e8

080011d4 <_read_r>:
 80011d4:	b538      	push	{r3, r4, r5, lr}
 80011d6:	4d07      	ldr	r5, [pc, #28]	; (80011f4 <_read_r+0x20>)
 80011d8:	4604      	mov	r4, r0
 80011da:	4608      	mov	r0, r1
 80011dc:	4611      	mov	r1, r2
 80011de:	2200      	movs	r2, #0
 80011e0:	602a      	str	r2, [r5, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	f7ff fa48 	bl	8000678 <_read>
 80011e8:	1c43      	adds	r3, r0, #1
 80011ea:	d102      	bne.n	80011f2 <_read_r+0x1e>
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	b103      	cbz	r3, 80011f2 <_read_r+0x1e>
 80011f0:	6023      	str	r3, [r4, #0]
 80011f2:	bd38      	pop	{r3, r4, r5, pc}
 80011f4:	200000f0 	.word	0x200000f0

080011f8 <_init>:
 80011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fa:	bf00      	nop
 80011fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011fe:	bc08      	pop	{r3}
 8001200:	469e      	mov	lr, r3
 8001202:	4770      	bx	lr

08001204 <_fini>:
 8001204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001206:	bf00      	nop
 8001208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800120a:	bc08      	pop	{r3}
 800120c:	469e      	mov	lr, r3
 800120e:	4770      	bx	lr
