
stm32f410rb_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000768  08000770  00010770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000768  08000768  00010770  2**0
                  CONTENTS
  4 .ARM          00000000  08000768  08000768  00010770  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000768  08000770  00010770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000768  08000768  00010768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800076c  0800076c  0001076c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000770  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000770  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010770  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009c7  00000000  00000000  000107a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000239  00000000  00000000  00011167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  000113a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00011460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d28  00000000  00000000  000114f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e53  00000000  00000000  00013220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000068cc  00000000  00000000  00014073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001a93f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000024c  00000000  00000000  0001a994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000750 	.word	0x08000750

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000750 	.word	0x08000750

08000208 <delay>:
#include "stm32f410rb.h"

#define LOW				0
#define BTN_PRESSED		LOW

void delay(void){
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 800020e:	2300      	movs	r3, #0
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	e002      	b.n	800021a <delay+0x12>
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	3301      	adds	r3, #1
 8000218:	607b      	str	r3, [r7, #4]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <delay+0x28>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d9f8      	bls.n	8000214 <delay+0xc>
}
 8000222:	bf00      	nop
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	0007a11f 	.word	0x0007a11f

08000234 <main>:

int main (void){
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed, GPIOBtn;

	GpioLed.pGPIOx = GPIOA;
 800023a:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <main+0x70>)
 800023c:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800023e:	2305      	movs	r3, #5
 8000240:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000242:	2301      	movs	r3, #1
 8000244:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000246:	2302      	movs	r3, #2
 8000248:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800024a:	2300      	movs	r3, #0
 800024c:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800024e:	2300      	movs	r3, #0
 8000250:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000252:	2101      	movs	r1, #1
 8000254:	4813      	ldr	r0, [pc, #76]	; (80002a4 <main+0x70>)
 8000256:	f000 f853 	bl	8000300 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 800025a:	f107 030c 	add.w	r3, r7, #12
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f8be 	bl	80003e0 <GPIO_Init>

	GPIOBtn.pGPIOx = GPIOC;
 8000264:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <main+0x74>)
 8000266:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000268:	230d      	movs	r3, #13
 800026a:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 800026c:	2300      	movs	r3, #0
 800026e:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000270:	2302      	movs	r3, #2
 8000272:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000274:	2300      	movs	r3, #0
 8000276:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000278:	2101      	movs	r1, #1
 800027a:	480b      	ldr	r0, [pc, #44]	; (80002a8 <main+0x74>)
 800027c:	f000 f840 	bl	8000300 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOBtn);
 8000280:	463b      	mov	r3, r7
 8000282:	4618      	mov	r0, r3
 8000284:	f000 f8ac 	bl	80003e0 <GPIO_Init>

	while(1){
		if(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) == BTN_PRESSED){
 8000288:	210d      	movs	r1, #13
 800028a:	4807      	ldr	r0, [pc, #28]	; (80002a8 <main+0x74>)
 800028c:	f000 fa10 	bl	80006b0 <GPIO_ReadFromInputPin>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d1f8      	bne.n	8000288 <main+0x54>
			delay();
 8000296:	f7ff ffb7 	bl	8000208 <delay>
			GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 800029a:	2105      	movs	r1, #5
 800029c:	4801      	ldr	r0, [pc, #4]	; (80002a4 <main+0x70>)
 800029e:	f000 fa1d 	bl	80006dc <GPIO_ToggleOutputPin>
		if(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) == BTN_PRESSED){
 80002a2:	e7f1      	b.n	8000288 <main+0x54>
 80002a4:	40020000 	.word	0x40020000
 80002a8:	40020800 	.word	0x40020800

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 fa15 	bl	8000708 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ffa9 	bl	8000234 <main>

080002e2 <LoopForever>:

LoopForever:
    b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f0:	08000770 	.word	0x08000770
  ldr r2, =_sbss
 80002f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f8:	2000001c 	.word	0x2000001c

080002fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC_IRQHandler>
	...

08000300 <GPIO_PeriClockControl>:

#include "stm32f410rb_gpio_driver.h"

/*APIs*/
//Setup del reloj periferico
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	460b      	mov	r3, r1
 800030a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d12b      	bne.n	800036a <GPIO_PeriClockControl+0x6a>
		if(pGPIOx == GPIOA){
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a2d      	ldr	r2, [pc, #180]	; (80003cc <GPIO_PeriClockControl+0xcc>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800031a:	4b2d      	ldr	r3, [pc, #180]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a2c      	ldr	r2, [pc, #176]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOC_PCLK_DI();
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 8000326:	e04b      	b.n	80003c0 <GPIO_PeriClockControl+0xc0>
		}else if(pGPIOx == GPIOB){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a2a      	ldr	r2, [pc, #168]	; (80003d4 <GPIO_PeriClockControl+0xd4>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000330:	4b27      	ldr	r3, [pc, #156]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a26      	ldr	r2, [pc, #152]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033c:	e040      	b.n	80003c0 <GPIO_PeriClockControl+0xc0>
		}else if(pGPIOx == GPIOC){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a25      	ldr	r2, [pc, #148]	; (80003d8 <GPIO_PeriClockControl+0xd8>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000346:	4b22      	ldr	r3, [pc, #136]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a21      	ldr	r2, [pc, #132]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 800034c:	f043 0304 	orr.w	r3, r3, #4
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000352:	e035      	b.n	80003c0 <GPIO_PeriClockControl+0xc0>
		}else if(pGPIOx == GPIOH){
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a21      	ldr	r2, [pc, #132]	; (80003dc <GPIO_PeriClockControl+0xdc>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d131      	bne.n	80003c0 <GPIO_PeriClockControl+0xc0>
			GPIOH_PCLK_EN();
 800035c:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a1b      	ldr	r2, [pc, #108]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 8000362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e02a      	b.n	80003c0 <GPIO_PeriClockControl+0xc0>
		if(pGPIOx == GPIOA){
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a17      	ldr	r2, [pc, #92]	; (80003cc <GPIO_PeriClockControl+0xcc>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockControl+0x80>
			GPIOA_PCLK_DI();
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a16      	ldr	r2, [pc, #88]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 8000378:	f023 0301 	bic.w	r3, r3, #1
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e01f      	b.n	80003c0 <GPIO_PeriClockControl+0xc0>
		}else if(pGPIOx == GPIOB){
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <GPIO_PeriClockControl+0xd4>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <GPIO_PeriClockControl+0x96>
			GPIOB_PCLK_DI();
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 800038e:	f023 0302 	bic.w	r3, r3, #2
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	e014      	b.n	80003c0 <GPIO_PeriClockControl+0xc0>
		}else if(pGPIOx == GPIOC){
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a0f      	ldr	r2, [pc, #60]	; (80003d8 <GPIO_PeriClockControl+0xd8>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClockControl+0xac>
			GPIOC_PCLK_DI();
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	4a0b      	ldr	r2, [pc, #44]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 80003a4:	f023 0304 	bic.w	r3, r3, #4
 80003a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003aa:	e009      	b.n	80003c0 <GPIO_PeriClockControl+0xc0>
		}else if(pGPIOx == GPIOH){
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <GPIO_PeriClockControl+0xdc>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d105      	bne.n	80003c0 <GPIO_PeriClockControl+0xc0>
			GPIOH_PCLK_DI();
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <GPIO_PeriClockControl+0xd0>)
 80003ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	40020000 	.word	0x40020000
 80003d0:	40023800 	.word	0x40023800
 80003d4:	40020400 	.word	0x40020400
 80003d8:	40020800 	.word	0x40020800
 80003dc:	40021c00 	.word	0x40021c00

080003e0 <GPIO_Init>:

//Incializar y reinicializar GPIO
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;	//Registro temporario
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]

	//Habilitar el clock de periferico
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2101      	movs	r1, #1
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ff84 	bl	8000300 <GPIO_PeriClockControl>

	//1. Configurar el modo del pin GPIO
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	795b      	ldrb	r3, [r3, #5]
 80003fc:	2b03      	cmp	r3, #3
 80003fe:	d81f      	bhi.n	8000440 <GPIO_Init+0x60>
		//Modos sin interrupcion
		//Con esto nosotros nos desplazamos por el los pines de a dos por eso la multiplicacion por 2
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	795b      	ldrb	r3, [r3, #5]
 8000404:	461a      	mov	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	791b      	ldrb	r3, [r3, #4]
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	4619      	mov	r1, r3
 800041e:	2303      	movs	r3, #3
 8000420:	408b      	lsls	r3, r1
 8000422:	43db      	mvns	r3, r3
 8000424:	4619      	mov	r1, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	400a      	ands	r2, r1
 800042c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	6819      	ldr	r1, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	697a      	ldr	r2, [r7, #20]
 800043a:	430a      	orrs	r2, r1
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	e093      	b.n	8000568 <GPIO_Init+0x188>
	}else{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	795b      	ldrb	r3, [r3, #5]
 8000444:	2b04      	cmp	r3, #4
 8000446:	d117      	bne.n	8000478 <GPIO_Init+0x98>
			//1. Configurar el registro de selección de disparador descendente (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000448:	4b92      	ldr	r3, [pc, #584]	; (8000694 <GPIO_Init+0x2b4>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7912      	ldrb	r2, [r2, #4]
 8000450:	4611      	mov	r1, r2
 8000452:	2201      	movs	r2, #1
 8000454:	408a      	lsls	r2, r1
 8000456:	4611      	mov	r1, r2
 8000458:	4a8e      	ldr	r2, [pc, #568]	; (8000694 <GPIO_Init+0x2b4>)
 800045a:	430b      	orrs	r3, r1
 800045c:	60d3      	str	r3, [r2, #12]
			//Limpiar el correspondiente bit RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800045e:	4b8d      	ldr	r3, [pc, #564]	; (8000694 <GPIO_Init+0x2b4>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	7912      	ldrb	r2, [r2, #4]
 8000466:	4611      	mov	r1, r2
 8000468:	2201      	movs	r2, #1
 800046a:	408a      	lsls	r2, r1
 800046c:	43d2      	mvns	r2, r2
 800046e:	4611      	mov	r1, r2
 8000470:	4a88      	ldr	r2, [pc, #544]	; (8000694 <GPIO_Init+0x2b4>)
 8000472:	400b      	ands	r3, r1
 8000474:	6093      	str	r3, [r2, #8]
 8000476:	e035      	b.n	80004e4 <GPIO_Init+0x104>
			//Esto ultimo es para asegurarse que sea por flanco de caida.
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	795b      	ldrb	r3, [r3, #5]
 800047c:	2b05      	cmp	r3, #5
 800047e:	d117      	bne.n	80004b0 <GPIO_Init+0xd0>
			//1. Configurar el RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000480:	4b84      	ldr	r3, [pc, #528]	; (8000694 <GPIO_Init+0x2b4>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7912      	ldrb	r2, [r2, #4]
 8000488:	4611      	mov	r1, r2
 800048a:	2201      	movs	r2, #1
 800048c:	408a      	lsls	r2, r1
 800048e:	4611      	mov	r1, r2
 8000490:	4a80      	ldr	r2, [pc, #512]	; (8000694 <GPIO_Init+0x2b4>)
 8000492:	430b      	orrs	r3, r1
 8000494:	6093      	str	r3, [r2, #8]
			//Limpiar el correspondiente bit RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000496:	4b7f      	ldr	r3, [pc, #508]	; (8000694 <GPIO_Init+0x2b4>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	7912      	ldrb	r2, [r2, #4]
 800049e:	4611      	mov	r1, r2
 80004a0:	2201      	movs	r2, #1
 80004a2:	408a      	lsls	r2, r1
 80004a4:	43d2      	mvns	r2, r2
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a7a      	ldr	r2, [pc, #488]	; (8000694 <GPIO_Init+0x2b4>)
 80004aa:	400b      	ands	r3, r1
 80004ac:	60d3      	str	r3, [r2, #12]
 80004ae:	e019      	b.n	80004e4 <GPIO_Init+0x104>
			//Esto ultimo es para asegurarse que sea por flanco de subida.
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	795b      	ldrb	r3, [r3, #5]
 80004b4:	2b06      	cmp	r3, #6
 80004b6:	d115      	bne.n	80004e4 <GPIO_Init+0x104>
			//1. Configurar ambos FTRS y RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b8:	4b76      	ldr	r3, [pc, #472]	; (8000694 <GPIO_Init+0x2b4>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	7912      	ldrb	r2, [r2, #4]
 80004c0:	4611      	mov	r1, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	408a      	lsls	r2, r1
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a72      	ldr	r2, [pc, #456]	; (8000694 <GPIO_Init+0x2b4>)
 80004ca:	430b      	orrs	r3, r1
 80004cc:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ce:	4b71      	ldr	r3, [pc, #452]	; (8000694 <GPIO_Init+0x2b4>)
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	7912      	ldrb	r2, [r2, #4]
 80004d6:	4611      	mov	r1, r2
 80004d8:	2201      	movs	r2, #1
 80004da:	408a      	lsls	r2, r1
 80004dc:	4611      	mov	r1, r2
 80004de:	4a6d      	ldr	r2, [pc, #436]	; (8000694 <GPIO_Init+0x2b4>)
 80004e0:	430b      	orrs	r3, r1
 80004e2:	6093      	str	r3, [r2, #8]
		}
		//2. Configurar el puerto de seleccion en SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	089b      	lsrs	r3, r3, #2
 80004ea:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	791b      	ldrb	r3, [r3, #4]
 80004f0:	f003 0303 	and.w	r3, r3, #3
 80004f4:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a67      	ldr	r2, [pc, #412]	; (8000698 <GPIO_Init+0x2b8>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d016      	beq.n	800052e <GPIO_Init+0x14e>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a65      	ldr	r2, [pc, #404]	; (800069c <GPIO_Init+0x2bc>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d00f      	beq.n	800052a <GPIO_Init+0x14a>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a64      	ldr	r2, [pc, #400]	; (80006a0 <GPIO_Init+0x2c0>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d008      	beq.n	8000526 <GPIO_Init+0x146>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a62      	ldr	r2, [pc, #392]	; (80006a4 <GPIO_Init+0x2c4>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d101      	bne.n	8000522 <GPIO_Init+0x142>
 800051e:	2307      	movs	r3, #7
 8000520:	e006      	b.n	8000530 <GPIO_Init+0x150>
 8000522:	2300      	movs	r3, #0
 8000524:	e004      	b.n	8000530 <GPIO_Init+0x150>
 8000526:	2302      	movs	r3, #2
 8000528:	e002      	b.n	8000530 <GPIO_Init+0x150>
 800052a:	2301      	movs	r3, #1
 800052c:	e000      	b.n	8000530 <GPIO_Init+0x150>
 800052e:	2300      	movs	r3, #0
 8000530:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000532:	4b5d      	ldr	r3, [pc, #372]	; (80006a8 <GPIO_Init+0x2c8>)
 8000534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000536:	4a5c      	ldr	r2, [pc, #368]	; (80006a8 <GPIO_Init+0x2c8>)
 8000538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053c:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 800053e:	7c7a      	ldrb	r2, [r7, #17]
 8000540:	7cbb      	ldrb	r3, [r7, #18]
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	fa02 f103 	lsl.w	r1, r2, r3
 8000548:	4a58      	ldr	r2, [pc, #352]	; (80006ac <GPIO_Init+0x2cc>)
 800054a:	7cfb      	ldrb	r3, [r7, #19]
 800054c:	3302      	adds	r3, #2
 800054e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Habilitar la entrega de interrupción exti usando el registro de mascara de interrupcion IMR.
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000552:	4b50      	ldr	r3, [pc, #320]	; (8000694 <GPIO_Init+0x2b4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	7912      	ldrb	r2, [r2, #4]
 800055a:	4611      	mov	r1, r2
 800055c:	2201      	movs	r2, #1
 800055e:	408a      	lsls	r2, r1
 8000560:	4611      	mov	r1, r2
 8000562:	4a4c      	ldr	r2, [pc, #304]	; (8000694 <GPIO_Init+0x2b4>)
 8000564:	430b      	orrs	r3, r1
 8000566:	6013      	str	r3, [r2, #0]
	}
	//2. Configurar la velocidad
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	799b      	ldrb	r3, [r3, #6]
 800056c:	461a      	mov	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	fa02 f303 	lsl.w	r3, r2, r3
 8000578:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	689a      	ldr	r2, [r3, #8]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	4619      	mov	r1, r3
 8000586:	2303      	movs	r3, #3
 8000588:	408b      	lsls	r3, r1
 800058a:	43db      	mvns	r3, r3
 800058c:	4619      	mov	r1, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	400a      	ands	r2, r1
 8000594:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6899      	ldr	r1, [r3, #8]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	609a      	str	r2, [r3, #8]

	//3. Configurar las configuraciones pull up y pull down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	79db      	ldrb	r3, [r3, #7]
 80005aa:	461a      	mov	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	68da      	ldr	r2, [r3, #12]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	4619      	mov	r1, r3
 80005c4:	2303      	movs	r3, #3
 80005c6:	408b      	lsls	r3, r1
 80005c8:	43db      	mvns	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	400a      	ands	r2, r1
 80005d2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	68d9      	ldr	r1, [r3, #12]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	697a      	ldr	r2, [r7, #20]
 80005e0:	430a      	orrs	r2, r1
 80005e2:	60da      	str	r2, [r3, #12]

	//4. Configurar el tipo de salida.
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7a1b      	ldrb	r3, [r3, #8]
 80005e8:	461a      	mov	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	685a      	ldr	r2, [r3, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	791b      	ldrb	r3, [r3, #4]
 80005fe:	4619      	mov	r1, r3
 8000600:	2303      	movs	r3, #3
 8000602:	408b      	lsls	r3, r1
 8000604:	43db      	mvns	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	400a      	ands	r2, r1
 800060e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	6859      	ldr	r1, [r3, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	430a      	orrs	r2, r1
 800061e:	605a      	str	r2, [r3, #4]

	//5. Configurar la funcionalidad alternativa.
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d131      	bne.n	800068c <GPIO_Init+0x2ac>
		//Configurar el registro de funcion alternativa.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	08db      	lsrs	r3, r3, #3
 800062e:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	f003 0307 	and.w	r3, r3, #7
 8000638:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	7c3a      	ldrb	r2, [r7, #16]
 8000640:	3208      	adds	r2, #8
 8000642:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	220f      	movs	r2, #15
 800064c:	fa02 f303 	lsl.w	r3, r2, r3
 8000650:	43db      	mvns	r3, r3
 8000652:	4618      	mov	r0, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	7c3a      	ldrb	r2, [r7, #16]
 800065a:	4001      	ands	r1, r0
 800065c:	3208      	adds	r2, #8
 800065e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	7c3a      	ldrb	r2, [r7, #16]
 8000668:	3208      	adds	r2, #8
 800066a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	7a5b      	ldrb	r3, [r3, #9]
 8000672:	461a      	mov	r2, r3
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	4618      	mov	r0, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	7c3a      	ldrb	r2, [r7, #16]
 8000684:	4301      	orrs	r1, r0
 8000686:	3208      	adds	r2, #8
 8000688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40013c00 	.word	0x40013c00
 8000698:	40020000 	.word	0x40020000
 800069c:	40020400 	.word	0x40020400
 80006a0:	40020800 	.word	0x40020800
 80006a4:	40021c00 	.word	0x40021c00
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40013800 	.word	0x40013800

080006b0 <GPIO_ReadFromInputPin>:
		GPIOH_REG_RESET();
	}
}

//Escribir y leer datos.
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber){
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> pinNumber) & 0x00000001);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	691a      	ldr	r2, [r3, #16]
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	fa22 f303 	lsr.w	r3, r2, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]
	return value;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <GPIO_ToggleOutputPin>:

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value){
	pGPIOx->ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	78fa      	ldrb	r2, [r7, #3]
 80006ee:	2101      	movs	r1, #1
 80006f0:	fa01 f202 	lsl.w	r2, r1, r2
 80006f4:	405a      	eors	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	615a      	str	r2, [r3, #20]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <__libc_init_array>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	4d0d      	ldr	r5, [pc, #52]	; (8000740 <__libc_init_array+0x38>)
 800070c:	4c0d      	ldr	r4, [pc, #52]	; (8000744 <__libc_init_array+0x3c>)
 800070e:	1b64      	subs	r4, r4, r5
 8000710:	10a4      	asrs	r4, r4, #2
 8000712:	2600      	movs	r6, #0
 8000714:	42a6      	cmp	r6, r4
 8000716:	d109      	bne.n	800072c <__libc_init_array+0x24>
 8000718:	4d0b      	ldr	r5, [pc, #44]	; (8000748 <__libc_init_array+0x40>)
 800071a:	4c0c      	ldr	r4, [pc, #48]	; (800074c <__libc_init_array+0x44>)
 800071c:	f000 f818 	bl	8000750 <_init>
 8000720:	1b64      	subs	r4, r4, r5
 8000722:	10a4      	asrs	r4, r4, #2
 8000724:	2600      	movs	r6, #0
 8000726:	42a6      	cmp	r6, r4
 8000728:	d105      	bne.n	8000736 <__libc_init_array+0x2e>
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000730:	4798      	blx	r3
 8000732:	3601      	adds	r6, #1
 8000734:	e7ee      	b.n	8000714 <__libc_init_array+0xc>
 8000736:	f855 3b04 	ldr.w	r3, [r5], #4
 800073a:	4798      	blx	r3
 800073c:	3601      	adds	r6, #1
 800073e:	e7f2      	b.n	8000726 <__libc_init_array+0x1e>
 8000740:	08000768 	.word	0x08000768
 8000744:	08000768 	.word	0x08000768
 8000748:	08000768 	.word	0x08000768
 800074c:	0800076c 	.word	0x0800076c

08000750 <_init>:
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	bf00      	nop
 8000754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000756:	bc08      	pop	{r3}
 8000758:	469e      	mov	lr, r3
 800075a:	4770      	bx	lr

0800075c <_fini>:
 800075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075e:	bf00      	nop
 8000760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000762:	bc08      	pop	{r3}
 8000764:	469e      	mov	lr, r3
 8000766:	4770      	bx	lr
